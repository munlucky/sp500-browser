class BrowserStockScanner {
    constructor() {
        this.apiKey = 'VVTMQ91XVOYZSYFR'; // Alpha Vantage Î¨¥Î£å ÌÇ§
        this.corsProxy = 'https://api.allorigins.win/raw?url=';
        this.isScanning = false;
        this.sp500Tickers = [];
    }

    async init() {
        console.log('üöÄ Ïä§Ï∫êÎÑà Ï¥àÍ∏∞Ìôî Ï§ë...');
        await this.loadSP500Tickers();
        this.bindEvents();
    }

    async loadSP500Tickers() {
        try {
            // Ï∫êÏãúÎêú Î¶¨Ïä§Ìä∏ Î®ºÏ†Ä ÌôïÏù∏
            const cachedTickers = StorageManager.getCachedData('sp500_tickers');
            if (cachedTickers && cachedTickers.length > 0) {
                this.sp500Tickers = cachedTickers;
                console.log(`üì¶ Ï∫êÏãúÎêú ${this.sp500Tickers.length}Í∞ú S&P 500 Ï¢ÖÎ™© Î°úÎìúÎê®`);
                return;
            }

            // Î¨¥Î£å Î¨¥Ï†úÌïú Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§Îì§
            const freeSources = [
                {
                    name: 'Wikipedia JSON API',
                    url: 'https://en.wikipedia.org/api/rest_v1/page/mobile-sections/List_of_S%26P_500_companies',
                    parser: this.parseWikipediaJSON.bind(this)
                },
                {
                    name: 'GitHub S&P 500 CSV',
                    url: 'https://raw.githubusercontent.com/datasets/s-and-p-500-companies/master/data/constituents.csv',
                    parser: this.parseCSV.bind(this)
                },
                {
                    name: 'Alternative GitHub CSV',
                    url: 'https://raw.githubusercontent.com/dxjoshi/sp500_stocks/main/sp500_stocks.csv',
                    parser: this.parseAlternativeCSV.bind(this)
                },
                {
                    name: 'Datahub S&P 500',
                    url: 'https://datahub.io/core/s-and-p-500-companies/r/constituents.csv',
                    parser: this.parseCSV.bind(this)
                },
                {
                    name: 'CORS Proxy + Yahoo Finance',
                    url: 'https://api.allorigins.win/raw?url=' + encodeURIComponent('https://finance.yahoo.com/quote/%5EGSPC/components/'),
                    parser: this.parseYahooHTML.bind(this)
                }
            ];

            for (const source of freeSources) {
                try {
                    console.log(`üì° ${source.name}ÏóêÏÑú S&P 500 Î¶¨Ïä§Ìä∏ Î°úÎìú ÏãúÎèÑ...`);
                    const response = await fetch(source.url);
                    
                    if (response.ok) {
                        const data = await response.text();
                        const tickers = await source.parser(data);
                        
                        if (tickers && tickers.length > 400) { // S&P 500ÏùÄ 500Í∞ú Ï†ïÎèÑÏù¥ÎØÄÎ°ú 400Í∞ú Ïù¥ÏÉÅÏùº ÎïåÎßå ÏÑ±Í≥µÏúºÎ°ú Í∞ÑÏ£º
                            this.sp500Tickers = tickers;
                            StorageManager.cacheData('sp500_tickers', this.sp500Tickers, 7 * 24 * 60); // 7Ïùº Ï∫êÏãú
                            console.log(`üìä ${source.name}ÏóêÏÑú ${this.sp500Tickers.length}Í∞ú S&P 500 Ï¢ÖÎ™© Î°úÎìúÎê®`);
                            return;
                        } else if (tickers && tickers.length > 0) {
                            console.warn(`‚ö†Ô∏è ${source.name}ÏóêÏÑú ${tickers.length}Í∞úÎßå Î°úÎìúÎê® (Î∂ÄÎ∂Ñ ÏÑ±Í≥µ)`);
                        }
                    }
                } catch (error) {
                    console.warn(`‚ùå ${source.name} Î°úÎìú Ïã§Ìå®:`, error);
                    continue;
                }
            }

            // Î™®Îì† Î∞©Î≤ï Ïã§Ìå® Ïãú ÌôïÏû•Îêú Î∞±ÏóÖ Î¶¨Ïä§Ìä∏ ÏÇ¨Ïö© (Ï£ºÏöî S&P 500 Ï¢ÖÎ™©Îì§)
            this.sp500Tickers = [
                // Í∏∞Ïà†Ï£º (Technology)
                'AAPL', 'MSFT', 'GOOGL', 'GOOG', 'AMZN', 'NVDA', 'TSLA', 'META', 'NFLX', 'AMD', 'PYPL', 'ADBE', 'CRM', 'INTC', 'CSCO', 'AVGO', 'ORCL', 'QCOM', 'TXN', 'INTU', 'AMAT', 'MU', 'LRCX', 'KLAC', 'MRVL', 'CDNS', 'SNPS', 'WDAY', 'ABNB', 'FTNT', 'DXCM', 'TEAM', 'ADSK', 'SPLK', 'DOCU', 'ZOOM', 'ROKU', 'CRWD', 'OKTA', 'SNOW', 'DDOG', 'ZS', 'PANW', 'UBER', 'LYFT', 'PLTR', 'RBLX', 'HOOD', 'AFRM', 'UPST', 'SQ', 'SHOP',
                
                // Ìó¨Ïä§ÏºÄÏñ¥ (Healthcare)
                'JNJ', 'UNH', 'PFE', 'ABT', 'TMO', 'ABBV', 'DHR', 'BMY', 'CVS', 'MDT', 'GILD', 'REGN', 'VRTX', 'ISRG', 'CI', 'ANTM', 'HUM', 'BIIB', 'ILMN', 'MRNA', 'DXCM', 'ZTS', 'EW', 'IDXX', 'A', 'SYK', 'BSX', 'ALGN', 'RMD', 'TECH', 'CTLT', 'BDX', 'WAT', 'MTD', 'DGX', 'LH', 'PKI', 'HOLX', 'RVTY', 'MOH', 'CNC', 'CAH', 'MCK', 'ABC', 'VTRS', 'GEHC', 'SOLV', 'PODD', 'HSIC',
                
                // Í∏àÏúµ (Financial Services)
                'BRK.B', 'JPM', 'V', 'MA', 'BAC', 'WFC', 'GS', 'MS', 'C', 'AXP', 'BLK', 'SPGI', 'ICE', 'CME', 'MCO', 'COF', 'USB', 'TFC', 'PNC', 'SCHW', 'BK', 'STT', 'NTRS', 'CFG', 'HBAN', 'RF', 'FITB', 'KEY', 'ZION', 'SIVB', 'PBCT', 'CMA', 'ALLY', 'DFS', 'SYF', 'PYPL', 'FIS', 'FISV', 'ADP', 'PAYX', 'BR', 'MKTX', 'NDAQ', 'CBOE', 'TROW', 'BEN', 'IVZ', 'ETFC', 'IBKR', 'NAVI',
                
                // ÏÜåÎπÑÏû¨ (Consumer Discretionary)
                'TSLA', 'AMZN', 'HD', 'MCD', 'NKE', 'LOW', 'SBUX', 'TJX', 'BKNG', 'ORLY', 'LULU', 'EBAY', 'ETSY', 'CHTR', 'CMCSA', 'DISH', 'NFLX', 'DIS', 'PARA', 'WBD', 'FOXA', 'FOX', 'GRMN', 'APTV', 'LEA', 'BWA', 'GM', 'F', 'RIVN', 'LCID', 'NVR', 'PHM', 'DHI', 'LEN', 'TOL', 'KBH', 'MTH', 'TMHC', 'TPG', 'HLT', 'MAR', 'H', 'IHG', 'WYNN', 'LVS', 'MGM', 'CZR', 'PENN', 'DKNG',
                
                // ÏÜåÎπÑÌïÑÏàòÏû¨ (Consumer Staples)
                'WMT', 'PG', 'KO', 'PEP', 'COST', 'MDLZ', 'WBA', 'CVS', 'EXC', 'JNJ', 'CL', 'GIS', 'K', 'HSY', 'CPB', 'CAG', 'SJM', 'HRL', 'MKC', 'CHD', 'CLX', 'COTY', 'EL', 'KMB', 'SYY', 'DLTR', 'DG', 'KR', 'SWK', 'TSN', 'TAP', 'STZ', 'DEO', 'PM', 'MO', 'BTI', 'UVV', 'TPG', 'USFD', 'PFGC', 'CALM', 'JJSF', 'LANC', 'RIBT', 'SENEA', 'SENEB', 'SPTN', 'UNFI', 'USNA',
                
                // ÏóêÎÑàÏßÄ (Energy)
                'XOM', 'CVX', 'COP', 'EOG', 'SLB', 'PSX', 'VLO', 'MPC', 'OXY', 'KMI', 'WMB', 'OKE', 'TRGP', 'LNG', 'FANG', 'DVN', 'PXD', 'CTRA', 'MRO', 'APA', 'HAL', 'BKR', 'FTI', 'NOV', 'HP', 'CHK', 'EQT', 'MTDR', 'SM', 'RRC', 'CNX', 'CIVI', 'CPG', 'CRC', 'CRGY', 'CRK', 'DINO', 'DRQ', 'EGY', 'ENLC', 'EPD', 'ET', 'HESM', 'HES', 'HPK', 'KRP', 'MPLX', 'NEXT', 'NRP',
                
                // ÏÇ∞ÏóÖÏû¨ (Industrials)
                'BA', 'UNP', 'UPS', 'HON', 'RTX', 'LMT', 'CAT', 'DE', 'GE', 'MMM', 'FDX', 'NSC', 'CSX', 'NOC', 'GD', 'EMR', 'ETN', 'ITW', 'PH', 'CMI', 'CARR', 'OTIS', 'PCAR', 'JCI', 'TT', 'ROK', 'FAST', 'VRSK', 'PAYX', 'CTAS', 'EXPD', 'CHRW', 'JBHT', 'ODFL', 'XPO', 'ARCB', 'LSTR', 'MATX', 'SAIA', 'WERN', 'KNX', 'HUBG', 'FELE', 'GATX', 'GWR', 'RAIL', 'UNP', 'WAB', 'WABC',
                
                // ÏÜåÏû¨ (Materials)
                'LIN', 'APD', 'ECL', 'SHW', 'FCX', 'NEM', 'DOW', 'DD', 'PPG', 'IFF', 'MLM', 'VMC', 'NUE', 'STLD', 'PKG', 'IP', 'WRK', 'SON', 'SEE', 'BALL', 'CCL', 'AMCR', 'AVY', 'CF', 'FMC', 'LYB', 'CE', 'RPM', 'ALB', 'EMN', 'MOS', 'AA', 'X', 'CLF', 'SCCO', 'TECK', 'RIO', 'BHP', 'VALE', 'GOLD', 'NEM', 'AEM', 'KGC', 'AU', 'EGO', 'CDE', 'AG', 'HL', 'PAAS',
                
                // Î∂ÄÎèôÏÇ∞ (Real Estate)
                'AMT', 'PLD', 'CCI', 'EQIX', 'WELL', 'DLR', 'O', 'SBAC', 'PSA', 'EXR', 'AVB', 'EQR', 'VICI', 'VTR', 'ESS', 'MAA', 'KIM', 'REG', 'FRT', 'BXP', 'ARE', 'HST', 'CPT', 'UDR', 'PEAK', 'AIV', 'ELS', 'SUI', 'MSA', 'LSI', 'CUBE', 'REXR', 'AMH', 'INVH', 'COLD', 'PPS', 'LAMR', 'UNIT', 'ROIC', 'STAG', 'FR', 'KRC', 'HIW', 'DEI', 'PGRE', 'SLG', 'VNO', 'BDN', 'CUZ',
                
                // Ïú†Ìã∏Î¶¨Ìã∞ (Utilities)
                'NEE', 'DUK', 'SO', 'D', 'AEP', 'EXC', 'XEL', 'SRE', 'WEC', 'ED', 'EIX', 'ETR', 'ES', 'FE', 'AWK', 'PPL', 'CMS', 'DTE', 'NI', 'LNT', 'EVRG', 'AEE', 'CNP', 'VST', 'ATO', 'NJR', 'SWX', 'OGE', 'POR', 'AVA', 'AGR', 'BKH', 'SR', 'MDU', 'UTL', 'MGEE', 'OTTR', 'NOVA', 'YORW', 'ARTNA', 'CWEN', 'CWEN.A', 'HE', 'IDA', 'NEP', 'NWE', 'PNM', 'UGI', 'WTRG'
            ];
            
            console.log(`üìã Î∞±ÏóÖ Î¶¨Ïä§Ìä∏ ÏÇ¨Ïö©: ${this.sp500Tickers.length}Í∞ú Ï¢ÖÎ™©`);
            
        } catch (error) {
            console.error('S&P 500 Î¶¨Ïä§Ìä∏ Î°úÎìú Ïã§Ìå®:', error);
            // ÏµúÏÜå Î∞±ÏóÖ Î¶¨Ïä§Ìä∏
            this.sp500Tickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'NVDA'];
            console.log(`‚ö†Ô∏è ÏµúÏÜå Î∞±ÏóÖ Î¶¨Ïä§Ìä∏ ÏÇ¨Ïö©: ${this.sp500Tickers.length}Í∞ú Ï¢ÖÎ™©`);
        }
    }

    async scanStocks() {
        if (this.isScanning) return;
        
        this.isScanning = true;
        this.updateStatus('Ïä§Ï∫î Ï§ë...', 'scanning');
        
        const results = {
            breakoutStocks: [],
            waitingStocks: [],
            totalScanned: 0,
            errors: 0
        };

        // ÏÑ§Ï†ïÍ∞í Í∞ÄÏ†∏Ïò§Í∏∞
        const settings = StorageManager.getSettings();
        
        try {
            // ÏàúÏ∞®Ï†Å Ï≤òÎ¶¨ (ÌïòÎÇòÏî© Ï≤òÎ¶¨)
            const totalTickers = this.sp500Tickers.length;
            
            for (let i = 0; i < totalTickers; i++) {
                const ticker = this.sp500Tickers[i];
                const progress = Math.round(((i + 1) / totalTickers) * 100);
                
                this.updateStatus(`Ïä§Ï∫î Ï§ë... ${ticker} (${i + 1}/${totalTickers}) ${progress}%`, 'scanning');
                
                try {
                    const stock = await this.analyzeStock(ticker, settings);
                    results.totalScanned++;
                    
                    if (stock) {
                        if (stock.isBreakout) {
                            results.breakoutStocks.push(stock);
                            console.log(`üöÄ ÎèåÌåå Î∞úÍ≤¨: ${ticker} $${stock.currentPrice.toFixed(2)} (ÏßÑÏûÖÍ∞Ä: $${stock.entryPrice.toFixed(2)}, Î™©Ìëú1: $${stock.target1.toFixed(2)})`);
                        } else {
                            results.waitingStocks.push(stock);
                            console.log(`‚è∞ ÎåÄÍ∏∞ Ï§ë: ${ticker} $${stock.currentPrice.toFixed(2)} (ÏßÑÏûÖÍπåÏßÄ: $${stock.gapToEntry.toFixed(2)})`);
                        }
                        
                        // ÏÉÅÏÑ∏ Î°úÍ∑∏ (ÎîîÎ≤ÑÍπÖÏö©)
                        console.debug(`üìä ${ticker} Î∂ÑÏÑùÍ≤∞Í≥º:`, {
                            ÌòÑÏû¨Í∞Ä: stock.currentPrice.toFixed(2),
                            ÏßÑÏûÖÍ∞Ä: stock.entryPrice.toFixed(2),
                            Î≥ÄÎèôÎ•†: stock.volatility.toFixed(1) + '%',
                            Í±∞ÎûòÎüâ: stock.volume.toLocaleString(),
                            ÎèåÌååÏó¨Î∂Ä: stock.isBreakout ? '‚úÖ' : '‚ùå',
                            Ï°∞Í±¥ÎßåÏ°±: stock.meetsConditions ? '‚úÖ' : '‚ùå'
                        });
                    } else {
                        results.errors++;
                        console.warn(`‚ùå ${ticker} Î∂ÑÏÑù Ïã§Ìå®: Ï°∞Í±¥ Î∂àÎßåÏ°±`);
                    }
                } catch (error) {
                    results.errors++;
                    console.error(`‚ùå ${ticker} Î∂ÑÏÑù Ïã§Ìå®:`, error.message);
                }
                
                // Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ (10Í∞úÎßàÎã§ ÎòêÎäî ÏÉàÎ°úÏö¥ ÎèåÌåå Ï¢ÖÎ™© Î∞úÍ≤¨ Ïãú)
                if ((i + 1) % 10 === 0 || (stock && stock.isBreakout)) {
                    this.updateDashboard(results);
                }
                
                // API Ï†úÌïú Î∞©ÏßÄÎ•º ÏúÑÌïú ÎîúÎ†àÏù¥ (Îç∞Î™® Î™®ÎìúÍ∞Ä ÏïÑÎãê ÎïåÎßå)
                if (this.apiKey !== 'demo') {
                    await this.delay(200); // 200ms ÎîúÎ†àÏù¥
                }
            }
            
            // Í≤∞Í≥º Ï†ïÎ†¨
            results.waitingStocks.sort((a, b) => a.gapToEntry - b.gapToEntry);
            results.breakoutStocks.sort((a, b) => b.score - a.score);
            
            // ÏÉÅÏúÑ Í≤∞Í≥ºÎßå Ïú†ÏßÄ
            results.waitingStocks = results.waitingStocks.slice(0, 10);
            results.breakoutStocks = results.breakoutStocks.slice(0, 5);
            
            // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•
            StorageManager.saveResults(results);
            
            // UI ÏóÖÎç∞Ïù¥Ìä∏
            this.displayResults(results);
            
            // ÎèåÌåå ÏïåÎ¶º
            if (results.breakoutStocks.length > 0) {
                NotificationManager.sendBreakoutAlert(results.breakoutStocks);
            }
            
            this.updateStatus(`ÏôÑÎ£å: ${results.totalScanned}Í∞ú Ïä§Ï∫î`, 'completed');
            
        } catch (error) {
            console.error('Ïä§Ï∫î Ï§ë Ïò§Î•ò:', error);
            this.updateStatus('Ïä§Ï∫î Ïã§Ìå®', 'error');
        } finally {
            this.isScanning = false;
        }
    }

    async analyzeStock(ticker, settings) {
        try {
            // Yahoo Finance API ÎåÄÏã† Alpha Vantage ÏÇ¨Ïö© (CORS ÏßÄÏõê)
            const data = await this.fetchStockData(ticker);
            
            if (!data || !data.timeSeries) {
                return null;
            }
            
            const dates = Object.keys(data.timeSeries).sort().reverse();
            if (dates.length < 2) return null;
            
            const today = data.timeSeries[dates[0]];
            const yesterday = data.timeSeries[dates[1]];
            
            // Î≥ÄÎèôÏÑ± ÎèåÌåå Í≥ÑÏÇ∞
            const calculation = VolatilityCalculator.calculate({
                currentPrice: parseFloat(today['4. close']),
                yesterdayClose: parseFloat(yesterday['4. close']),
                yesterdayHigh: parseFloat(yesterday['2. high']),
                yesterdayLow: parseFloat(yesterday['3. low']),
                volume: parseInt(yesterday['5. volume'])
            }, settings);
            
            if (!calculation.meetsConditions) {
                return null;
            }
            
            return {
                ticker,
                ...calculation,
                timestamp: new Date().toISOString()
            };
            
        } catch (error) {
            console.error(`${ticker} Î∂ÑÏÑù Ï§ë Ïò§Î•ò:`, error);
            return null;
        }
    }

    async fetchStockData(ticker) {
        // Ïã§Ï†ú Alpha Vantage API ÌÇ§Í∞Ä ÏûàÏùÑ Îïå API Ìò∏Ï∂ú
        if (this.apiKey !== 'demo') {
            try {
                console.log(`üì° ${ticker} Alpha Vantage API Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Îäî Ï§ë...`);
                const url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${ticker}&apikey=${this.apiKey}`;
                const response = await fetch(url);
                
                if (response.ok) {
                    const data = await response.json();
                    const parsedData = await this.parseAlphaVantageData(data);
                    
                    if (parsedData && parsedData.timeSeries) {
                        console.log(`‚úÖ ${ticker} Ïã§Ï†ú API Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏÑ±Í≥µ`);
                        return parsedData;
                    } else {
                        console.warn(`‚ö†Ô∏è ${ticker} API ÏùëÎãµÏù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå, Î™®Ïùò Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©`);
                    }
                } else {
                    console.warn(`‚ö†Ô∏è ${ticker} API ÏùëÎãµ Ïò§Î•ò (${response.status}), Î™®Ïùò Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©`);
                }
            } catch (apiError) {
                console.warn(`‚ùå ${ticker} Alpha Vantage API Ïã§Ìå®:`, apiError);
            }
        }
    }

    // API Îç∞Ïù¥ÌÑ∞ ÌååÏã± Î©îÏÑúÎìúÎì§
    async parseAlphaVantageData(data) {
        try {
            if (data['Error Message'] || data['Note']) {
                throw new Error('API Ï†úÌïú ÎòêÎäî Ïò§Î•ò');
            }
            
            return {
                timeSeries: data['Time Series (Daily)']
            };
        } catch (error) {
            return null;
        }
    }


    displayResults(results) {
        // ÎåÄÏãúÎ≥¥Îìú ÏóÖÎç∞Ïù¥Ìä∏
        this.updateDashboard(results);
        
        // ÎèåÌåå Ï¢ÖÎ™© ÌëúÏãú
        this.renderStockCards('breakoutStocks', results.breakoutStocks, 'breakout');
        
        // ÎåÄÍ∏∞ Ï¢ÖÎ™© ÌëúÏãú
        this.renderStockCards('waitingStocks', results.waitingStocks, 'waiting');
    }

    updateDashboard(results) {
        // ÎåÄÏãúÎ≥¥Îìú Ïà´Ïûê ÏóÖÎç∞Ïù¥Ìä∏
        document.getElementById('breakoutCount').textContent = results.breakoutStocks.length;
        document.getElementById('waitingCount').textContent = results.waitingStocks.length;
        document.getElementById('totalScanned').textContent = results.totalScanned;
        document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString('ko-KR');
        
        // ÏßÑÌñâ Ï§ëÏùº Îïå Ïã§ÏãúÍ∞Ñ Í≤∞Í≥º ÌëúÏãú
        if (results.breakoutStocks.length > 0) {
            this.renderStockCards('breakoutStocks', results.breakoutStocks.slice(0, 10), 'breakout');
        }
        
        if (results.waitingStocks.length > 0) {
            this.renderStockCards('waitingStocks', results.waitingStocks.slice(0, 15), 'waiting');
        }
    }

    renderStockCards(containerId, stocks, type) {
        const container = document.getElementById(containerId);
        container.innerHTML = '';
        
        if (stocks.length === 0) {
            container.innerHTML = '<div class="no-results">Ï°∞Í±¥Ïóê ÎßûÎäî Ï¢ÖÎ™©Ïù¥ ÏóÜÏäµÎãàÎã§.</div>';
            return;
        }
        
        stocks.forEach(stock => {
            const card = document.createElement('div');
            card.className = `stock-card ${type}`;
            card.onclick = () => this.openStockChart(stock.ticker);
            
            const gapDisplay = type === 'waiting' 
                ? `<div class="gap">ÎèåÌååÍπåÏßÄ: $${stock.gapToEntry.toFixed(2)}</div>`
                : '<div class="breakout-badge">ÎèåÌåå!</div>';
            
            card.innerHTML = `
                <div class="stock-header">
                    <h3>${stock.ticker}</h3>
                    ${gapDisplay}
                </div>
                <div class="price-info">
                    <div class="current-price">$${stock.currentPrice.toFixed(2)}</div>
                    <div class="entry-price">ÏßÑÏûÖ: $${stock.entryPrice.toFixed(2)}</div>
                </div>
                <div class="targets">
                    <div class="target stop-loss">ÏÜêÏ†à: $${stock.stopLoss.toFixed(2)}</div>
                    <div class="target profit">Î™©Ìëú1: $${stock.target1.toFixed(2)}</div>
                    <div class="target profit">Î™©Ìëú2: $${stock.target2.toFixed(2)}</div>
                </div>
                <div class="stats">
                    <span>Î≥ÄÎèôÎ•†: ${stock.volatility.toFixed(1)}%</span>
                    <span>Í±∞ÎûòÎüâ: ${this.formatNumber(stock.volume)}</span>
                </div>
            `;
            
            container.appendChild(card);
        });
    }

    openStockChart(ticker) {
        // TradingView ÎòêÎäî Yahoo FinanceÎ°ú ÏÉà ÌÉ≠ÏóêÏÑú Ïó¥Í∏∞
        const url = `https://finance.yahoo.com/quote/${ticker}`;
        window.open(url, '_blank');
    }

    formatNumber(num) {
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return num.toString();
    }

    updateStatus(message, type = 'default') {
        const statusEl = document.getElementById('status');
        statusEl.textContent = message;
        statusEl.className = `status status-${type}`;
    }

    bindEvents() {
        document.getElementById('scanBtn').addEventListener('click', () => {
            this.scanStocks();
        });
        
        // ÏûêÎèô Ïä§Ï∫î ÏÑ§Ï†ï
        document.getElementById('autoScan').addEventListener('change', (e) => {
            if (e.target.checked) {
                this.startAutoScan();
            } else {
                this.stopAutoScan();
            }
        });
        
        // ÏÑ§Ï†ï Î≥ÄÍ≤Ω Í∞êÏßÄ
        document.getElementById('volatilityRange').addEventListener('input', (e) => {
            const value = e.target.value;
            document.getElementById('volatilityValue').textContent = `2-${value}%`;
            StorageManager.updateSettings({ volatilityMax: value / 100 });
        });
        
        document.getElementById('minVolume').addEventListener('change', (e) => {
            StorageManager.updateSettings({ minVolume: parseInt(e.target.value) });
        });
    }

    startAutoScan() {
        this.autoScanInterval = setInterval(() => {
            if (!this.isScanning) {
                this.scanStocks();
            }
        }, 5 * 60 * 1000); // 5Î∂ÑÎßàÎã§
    }

    stopAutoScan() {
        if (this.autoScanInterval) {
            clearInterval(this.autoScanInterval);
            this.autoScanInterval = null;
        }
    }

    chunkArray(array, size) {
        const chunks = [];
        for (let i = 0; i < array.length; i += size) {
            chunks.push(array.slice(i, i + size));
        }
        return chunks;
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Îç∞Ïù¥ÌÑ∞ ÌååÏã± Î©îÏÑúÎìúÎì§

    // Wikipedia JSON API ÌååÏã±
    parseWikipediaJSON(jsonText) {
        try {
            const data = JSON.parse(jsonText);
            const tickers = [];
            
            // Wikipedia mobile API ÏùëÎãµÏóêÏÑú ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
            if (data.sections) {
                for (const section of data.sections) {
                    if (section.text && section.text.includes('ticker')) {
                        const regex = /\b[A-Z]{1,5}\b/g;
                        const matches = section.text.match(regex);
                        if (matches) {
                            matches.forEach(ticker => {
                                if (ticker.length <= 5 && !tickers.includes(ticker)) {
                                    tickers.push(ticker);
                                }
                            });
                        }
                    }
                }
            }
            
            console.log(`Wikipedia JSONÏóêÏÑú ${tickers.length}Í∞ú Ï¢ÖÎ™© ÌååÏã±Îê®`);
            return tickers;
        } catch (error) {
            console.warn('Wikipedia JSON ÌååÏã± Ïã§Ìå®:', error);
            return [];
        }
    }

    // CSV ÌååÏã± (ÌëúÏ§Ä)
    parseCSV(csvText) {
        try {
            const lines = csvText.split('\n');
            const tickers = [];
            
            // CSV ÌååÏã± (Ï≤´ Î≤àÏß∏ Ï§ÑÏùÄ Ìó§Îçî - Symbol,Security,GICS Sector,...)
            for (let i = 1; i < lines.length; i++) {
                const line = lines[i].trim();
                if (line) {
                    const ticker = line.split(',')[0].trim().replace(/"/g, '');
                    if (ticker && ticker.length <= 5 && ticker.match(/^[A-Z]+$/)) {
                        tickers.push(ticker);
                    }
                }
            }
            
            console.log(`CSVÏóêÏÑú ${tickers.length}Í∞ú Ï¢ÖÎ™© ÌååÏã±Îê®`);
            return tickers;
        } catch (error) {
            console.warn('CSV ÌååÏã± Ïã§Ìå®:', error);
            return [];
        }
    }

    // Alternative CSV ÌååÏã±
    parseAlternativeCSV(csvText) {
        try {
            const lines = csvText.split('\n');
            const tickers = [];
            
            // Ìó§ÎçîÏóêÏÑú Symbol Ïª¨Îüº Ï∞æÍ∏∞
            const headers = lines[0].toLowerCase().split(',');
            const symbolIndex = headers.findIndex(h => 
                h.includes('symbol') || h.includes('ticker') || h.includes('stock')
            );
            
            if (symbolIndex >= 0) {
                for (let i = 1; i < lines.length; i++) {
                    const line = lines[i].trim();
                    if (line) {
                        const columns = line.split(',');
                        if (columns.length > symbolIndex) {
                            const ticker = columns[symbolIndex].trim().replace(/"/g, '');
                            if (ticker && ticker.length <= 5 && ticker.match(/^[A-Z]+$/)) {
                                tickers.push(ticker);
                            }
                        }
                    }
                }
            }
            
            console.log(`Alternative CSVÏóêÏÑú ${tickers.length}Í∞ú Ï¢ÖÎ™© ÌååÏã±Îê®`);
            return tickers;
        } catch (error) {
            console.warn('Alternative CSV ÌååÏã± Ïã§Ìå®:', error);
            return [];
        }
    }

    // Yahoo Finance HTML ÌååÏã±
    parseYahooHTML(htmlText) {
        try {
            const tickers = [];
            
            // Yahoo FinanceÏóêÏÑú ticker Ìå®ÌÑ¥ Ï∞æÍ∏∞
            const tickerRegex = /data-symbol="([A-Z]{1,5})"/g;
            let match;
            
            while ((match = tickerRegex.exec(htmlText)) !== null) {
                const ticker = match[1];
                if (ticker && ticker.length <= 5 && !tickers.includes(ticker)) {
                    tickers.push(ticker);
                }
            }
            
            // Ï∂îÍ∞Ä Ìå®ÌÑ¥ÏúºÎ°ú Îçî ÎßéÏùÄ ticker Ï∞æÍ∏∞
            const altRegex = /symbol:\s*"([A-Z]{1,5})"/g;
            while ((match = altRegex.exec(htmlText)) !== null) {
                const ticker = match[1];
                if (ticker && ticker.length <= 5 && !tickers.includes(ticker)) {
                    tickers.push(ticker);
                }
            }
            
            console.log(`Yahoo Finance HTMLÏóêÏÑú ${tickers.length}Í∞ú Ï¢ÖÎ™© ÌååÏã±Îê®`);
            return tickers;
        } catch (error) {
            console.warn('Yahoo Finance HTML ÌååÏã± Ïã§Ìå®:', error);
            return [];
        }
    }
}

// Ï†ÑÏó≠ Ïä§Ï∫êÎÑà Ïù∏Ïä§ÌÑ¥Ïä§
let stockScanner;

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', async () => {
    stockScanner = new BrowserStockScanner();
    await stockScanner.init();
    
    // Ï∫êÏãúÎêú Í≤∞Í≥º Î°úÎìú
    const cachedResults = StorageManager.getResults();
    if (cachedResults) {
        stockScanner.displayResults(cachedResults);
    }
});