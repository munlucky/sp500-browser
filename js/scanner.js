class BrowserStockScanner {
    constructor() {
        this.apiKey = 'VVTMQ91XVOYZSYFR'; // Alpha Vantage Î¨¥Î£å ÌÇ§
        this.corsProxy = 'https://api.allorigins.win/raw?url=';
        this.isScanning = false;
        this.sp500Tickers = [];
        this.demoMode = true; // ÌÖåÏä§Ìä∏Ïö© Îç∞Î™® Î™®Îìú ÌôúÏÑ±Ìôî
        this.autoUpdateTimeout = null;
        this.autoUpdateEnabled = false;
        this.isAutoUpdating = false; // ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ Ï§ë ÌîåÎûòÍ∑∏
        this.lastScanResults = null;
        this.progressInterval = null;
        this.lastUpdateTime = null;
        this.updateIntervalMs = 60000; // Í∏∞Î≥∏ 1Î∂Ñ
    }

    async init() {
        console.log('üöÄ Ïä§Ï∫êÎÑà Ï¥àÍ∏∞Ìôî Ï§ë...');
        await this.loadSP500Tickers();
        this.loadSettings();
        this.bindEvents();
        
        // Ï¥àÍ∏∞ UI ÏÉÅÌÉú ÏÑ§Ï†ï
        this.updateAutoUpdateButtonUI();
    }

    // ÏÑ§Ï†ï Î°úÎìú
    loadSettings() {
        const settings = StorageManager.getSettings();
        this.demoMode = settings.demoMode;
        this.updateIntervalMs = settings.updateInterval * 1000;
        console.log('üìã ÏÑ§Ï†ï Î°úÎìúÎê®:', {
            demoMode: this.demoMode,
            updateInterval: settings.updateInterval + 'Ï¥à',
            autoUpdateEnabled: settings.autoUpdateEnabled
        });
    }

    async loadSP500Tickers() {
        try {
            // Ï∫êÏãúÎêú Î¶¨Ïä§Ìä∏ Î®ºÏ†Ä ÌôïÏù∏
            const cachedTickers = StorageManager.getCachedData('sp500_tickers');
            if (cachedTickers && cachedTickers.length > 400) {
                this.sp500Tickers = cachedTickers;
                console.log(`üì¶ Ï∫êÏãúÎêú ${this.sp500Tickers.length}Í∞ú S&P 500 Ï¢ÖÎ™© Î°úÎìúÎê®`);
                return;
            }

            // Î¨¥Î£å Î¨¥Ï†úÌïú Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§Îì§
            const freeSources = [
                {
                    name: 'Wikipedia JSON API',
                    url: this.corsProxy + encodeURIComponent('https://en.wikipedia.org/api/rest_v1/page/mobile-sections/List_of_S%26P_500_companies'),
                    parser: this.parseWikipediaJSON.bind(this)
                },
                {
                    name: 'GitHub S&P 500 CSV',
                    url: 'https://raw.githubusercontent.com/datasets/s-and-p-500-companies/master/data/constituents.csv',
                    parser: this.parseCSV.bind(this)
                },
                {
                    name: 'Alternative GitHub CSV',
                    url: 'https://raw.githubusercontent.com/dxjoshi/sp500_stocks/main/sp500_stocks.csv',
                    parser: this.parseAlternativeCSV.bind(this)
                }
            ];

            for (const source of freeSources) {
                try {
                    console.log(`üì° ${source.name}ÏóêÏÑú S&P 500 Î¶¨Ïä§Ìä∏ Î°úÎìú ÏãúÎèÑ...`);
                    console.log(`üîó URL: ${source.url}`);
                    const response = await fetch(source.url);
                    
                    console.log(`üìä ÏùëÎãµ ÏÉÅÌÉú: ${response.status} ${response.statusText}`);
                    
                    if (response.ok) {
                        const data = await response.text();
                        console.log(`üìÑ Îç∞Ïù¥ÌÑ∞ Í∏∏Ïù¥: ${data.length} characters`);
                        console.log(`üìÑ Îç∞Ïù¥ÌÑ∞ ÏãúÏûë Î∂ÄÎ∂Ñ: ${data.substring(0, 200)}...`);
                        
                        const tickers = await source.parser(data);
                        console.log(`üéØ ÌååÏã± Í≤∞Í≥º: ${tickers ? tickers.length : 0}Í∞ú Ìã∞Ïª§`);
                        
                        if (tickers && tickers.length > 400) { // S&P 500ÏùÄ 500Í∞ú Ï†ïÎèÑÏù¥ÎØÄÎ°ú 400Í∞ú Ïù¥ÏÉÅÏùº ÎïåÎßå ÏÑ±Í≥µÏúºÎ°ú Í∞ÑÏ£º
                            // Ï§ëÎ≥µ Ï†úÍ±∞
                            this.sp500Tickers = [...new Set(tickers)];
                            StorageManager.cacheData('sp500_tickers', this.sp500Tickers, 7 * 24 * 60); // 7Ïùº Ï∫êÏãú
                            console.log(`üìä ${source.name}ÏóêÏÑú ${this.sp500Tickers.length}Í∞ú S&P 500 Ï¢ÖÎ™© Î°úÎìúÎê® (Ï§ëÎ≥µ Ï†úÍ±∞ ÏôÑÎ£å)`);
                            return;
                        } else if (tickers && tickers.length > 0) {
                            console.warn(`‚ö†Ô∏è ${source.name}ÏóêÏÑú ${tickers.length}Í∞úÎßå Î°úÎìúÎê® (Î∂ÄÎ∂Ñ ÏÑ±Í≥µ)`);
                            console.log(`üîç Ï≤´ 10Í∞ú Ìã∞Ïª§:`, tickers.slice(0, 10));
                        } else {
                            console.warn(`‚ùå ${source.name}ÏóêÏÑú ÌååÏã± Ïã§Ìå® ÎòêÎäî Îπà Í≤∞Í≥º`);
                        }
                    } else {
                        console.warn(`‚ùå ${source.name} HTTP Ïò§Î•ò: ${response.status} ${response.statusText}`);
                    }
                } catch (error) {
                    console.warn(`‚ùå ${source.name} Î°úÎìú Ïã§Ìå®:`, error);
                    continue;
                }
            }

            // Î™®Îì† Î∞©Î≤ï Ïã§Ìå® Ïãú ÌôïÏû•Îêú Î∞±ÏóÖ Î¶¨Ïä§Ìä∏ ÏÇ¨Ïö© (Ï£ºÏöî S&P 500 Ï¢ÖÎ™©Îì§) - Ï§ëÎ≥µ Ï†úÍ±∞Îê®
            const backupTickers = [
                // Í∏∞Ïà†Ï£º (Technology)
                'AAPL', 'MSFT', 'GOOGL', 'GOOG', 'AMZN', 'NVDA', 'TSLA', 'META', 'NFLX', 'AMD', 'PYPL', 'ADBE', 'CRM', 'INTC', 'CSCO', 'AVGO', 'ORCL', 'QCOM', 'TXN', 'INTU', 'AMAT', 'MU', 'LRCX', 'KLAC', 'MRVL', 'CDNS', 'SNPS', 'WDAY', 'ABNB', 'FTNT', 'DXCM', 'TEAM', 'ADSK', 'SPLK', 'DOCU', 'ZOOM', 'ROKU', 'CRWD', 'OKTA', 'SNOW', 'DDOG', 'ZS', 'PANW', 'UBER', 'LYFT', 'PLTR', 'RBLX', 'HOOD', 'AFRM', 'UPST', 'SQ', 'SHOP',
                
                // Ìó¨Ïä§ÏºÄÏñ¥ (Healthcare)
                'JNJ', 'UNH', 'PFE', 'ABT', 'TMO', 'ABBV', 'DHR', 'BMY', 'CVS', 'MDT', 'GILD', 'REGN', 'VRTX', 'ISRG', 'CI', 'ANTM', 'HUM', 'BIIB', 'ILMN', 'MRNA', 'ZTS', 'EW', 'IDXX', 'A', 'SYK', 'BSX', 'ALGN', 'RMD', 'TECH', 'CTLT', 'BDX', 'WAT', 'MTD', 'DGX', 'LH', 'PKI', 'HOLX', 'RVTY', 'MOH', 'CNC', 'CAH', 'MCK', 'ABC', 'VTRS', 'GEHC', 'SOLV', 'PODD', 'HSIC',
                
                // Í∏àÏúµ (Financial Services)
                'BRK.B', 'JPM', 'V', 'MA', 'BAC', 'WFC', 'GS', 'MS', 'C', 'AXP', 'BLK', 'SPGI', 'ICE', 'CME', 'MCO', 'COF', 'USB', 'TFC', 'PNC', 'SCHW', 'BK', 'STT', 'NTRS', 'CFG', 'HBAN', 'RF', 'FITB', 'KEY', 'ZION', 'SIVB', 'PBCT', 'CMA', 'ALLY', 'DFS', 'SYF', 'FIS', 'FISV', 'ADP', 'PAYX', 'BR', 'MKTX', 'NDAQ', 'CBOE', 'TROW', 'BEN', 'IVZ', 'ETFC', 'IBKR', 'NAVI',
                
                // ÏÜåÎπÑÏû¨ (Consumer Discretionary)
                'HD', 'MCD', 'NKE', 'LOW', 'SBUX', 'TJX', 'BKNG', 'ORLY', 'LULU', 'EBAY', 'ETSY', 'CHTR', 'CMCSA', 'DISH', 'DIS', 'PARA', 'WBD', 'FOXA', 'FOX', 'GRMN', 'APTV', 'LEA', 'BWA', 'GM', 'F', 'RIVN', 'LCID', 'NVR', 'PHM', 'DHI', 'LEN', 'TOL', 'KBH', 'MTH', 'TMHC', 'TPG', 'HLT', 'MAR', 'H', 'IHG', 'WYNN', 'LVS', 'MGM', 'CZR', 'PENN', 'DKNG',
                
                // ÏÜåÎπÑÌïÑÏàòÏû¨ (Consumer Staples)
                'WMT', 'PG', 'KO', 'PEP', 'COST', 'MDLZ', 'WBA', 'EXC', 'CL', 'GIS', 'K', 'HSY', 'CPB', 'CAG', 'SJM', 'HRL', 'MKC', 'CHD', 'CLX', 'COTY', 'EL', 'KMB', 'SYY', 'DLTR', 'DG', 'KR', 'SWK', 'TSN', 'TAP', 'STZ', 'DEO', 'PM', 'MO', 'BTI', 'UVV', 'USFD', 'PFGC', 'CALM', 'JJSF', 'LANC', 'RIBT', 'SENEA', 'SENEB', 'SPTN', 'UNFI', 'USNA',
                
                // ÏóêÎÑàÏßÄ (Energy)
                'XOM', 'CVX', 'COP', 'EOG', 'SLB', 'PSX', 'VLO', 'MPC', 'OXY', 'KMI', 'WMB', 'OKE', 'TRGP', 'LNG', 'FANG', 'DVN', 'PXD', 'CTRA', 'MRO', 'APA', 'HAL', 'BKR', 'FTI', 'NOV', 'HP', 'CHK', 'EQT', 'MTDR', 'SM', 'RRC', 'CNX', 'CIVI', 'CPG', 'CRC', 'CRGY', 'CRK', 'DINO', 'DRQ', 'EGY', 'ENLC', 'EPD', 'ET', 'HESM', 'HES', 'HPK', 'KRP', 'MPLX', 'NEXT', 'NRP',
                
                // ÏÇ∞ÏóÖÏû¨ (Industrials)
                'BA', 'UNP', 'UPS', 'HON', 'RTX', 'LMT', 'CAT', 'DE', 'GE', 'MMM', 'FDX', 'NSC', 'CSX', 'NOC', 'GD', 'EMR', 'ETN', 'ITW', 'PH', 'CMI', 'CARR', 'OTIS', 'PCAR', 'JCI', 'TT', 'ROK', 'FAST', 'VRSK', 'CTAS', 'EXPD', 'CHRW', 'JBHT', 'ODFL', 'XPO', 'ARCB', 'LSTR', 'MATX', 'SAIA', 'WERN', 'KNX', 'HUBG', 'FELE', 'GATX', 'GWR', 'RAIL', 'WAB', 'WABC',
                
                // ÏÜåÏû¨ (Materials)
                'LIN', 'APD', 'ECL', 'SHW', 'FCX', 'NEM', 'DOW', 'DD', 'PPG', 'IFF', 'MLM', 'VMC', 'NUE', 'STLD', 'PKG', 'IP', 'WRK', 'SON', 'SEE', 'BALL', 'CCL', 'AMCR', 'AVY', 'CF', 'FMC', 'LYB', 'CE', 'RPM', 'ALB', 'EMN', 'MOS', 'AA', 'X', 'CLF', 'SCCO', 'TECK', 'RIO', 'BHP', 'VALE', 'GOLD', 'AEM', 'KGC', 'AU', 'EGO', 'CDE', 'AG', 'HL', 'PAAS',
                
                // Î∂ÄÎèôÏÇ∞ (Real Estate)
                'AMT', 'PLD', 'CCI', 'EQIX', 'WELL', 'DLR', 'O', 'SBAC', 'PSA', 'EXR', 'AVB', 'EQR', 'VICI', 'VTR', 'ESS', 'MAA', 'KIM', 'REG', 'FRT', 'BXP', 'ARE', 'HST', 'CPT', 'UDR', 'PEAK', 'AIV', 'ELS', 'SUI', 'MSA', 'LSI', 'CUBE', 'REXR', 'AMH', 'INVH', 'COLD', 'PPS', 'LAMR', 'UNIT', 'ROIC', 'STAG', 'FR', 'KRC', 'HIW', 'DEI', 'PGRE', 'SLG', 'VNO', 'BDN', 'CUZ',
                
                // Ïú†Ìã∏Î¶¨Ìã∞ (Utilities)
                'NEE', 'DUK', 'SO', 'D', 'AEP', 'XEL', 'SRE', 'WEC', 'ED', 'EIX', 'ETR', 'ES', 'FE', 'AWK', 'PPL', 'CMS', 'DTE', 'NI', 'LNT', 'EVRG', 'AEE', 'CNP', 'VST', 'ATO', 'NJR', 'SWX', 'OGE', 'POR', 'AVA', 'AGR', 'BKH', 'SR', 'MDU', 'UTL', 'MGEE', 'OTTR', 'NOVA', 'YORW', 'ARTNA', 'CWEN', 'CWEN.A', 'HE', 'IDA', 'NEP', 'NWE', 'PNM', 'UGI', 'WTRG'
            ];
            
            // Ï§ëÎ≥µ Ï†úÍ±∞
            this.sp500Tickers = [...new Set(backupTickers)];
            
            console.log(`üìã Î∞±ÏóÖ Î¶¨Ïä§Ìä∏ ÏÇ¨Ïö©: ${this.sp500Tickers.length}Í∞ú Ï¢ÖÎ™©`);
            
        } catch (error) {
            console.error('S&P 500 Î¶¨Ïä§Ìä∏ Î°úÎìú Ïã§Ìå®:', error);
            // ÏµúÏÜå Î∞±ÏóÖ Î¶¨Ïä§Ìä∏
            this.sp500Tickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'NVDA'];
            console.log(`‚ö†Ô∏è ÏµúÏÜå Î∞±ÏóÖ Î¶¨Ïä§Ìä∏ ÏÇ¨Ïö©: ${this.sp500Tickers.length}Í∞ú Ï¢ÖÎ™©`);
        }
    }

    async scanStocks() {
        if (this.isScanning) return;
        
        this.isScanning = true;
        this.updateStatus('Ïä§Ï∫î Ï§ë...', 'scanning');
        
        
        
        const results = {
            breakoutStocks: [],
            waitingStocks: [],
            totalScanned: 0,
            errors: 0
        };

        // ÏÑ§Ï†ïÍ∞í Í∞ÄÏ†∏Ïò§Í∏∞
        const settings = StorageManager.getSettings();
        
        try {
            const totalTickers = this.sp500Tickers.length; // Î™®Îì† S&P 500 Ï¢ÖÎ™© Ïä§Ï∫î
            const failedTickers = []; // Ïã§Ìå®Ìïú Ìï≠Î™©Îì§ Ï†ÄÏû•
            
            
            
            for (let i = 0; i < totalTickers; i++) {
                const ticker = this.sp500Tickers[i];
                const progress = Math.round(((i + 1) / totalTickers) * 100);
                let stock = null;
                
                this.updateStatus(`Ïä§Ï∫î Ï§ë... ${ticker} (${i + 1}/${totalTickers}) ${progress}%`, 'scanning');
                
                try {
                    stock = await this.analyzeStock(ticker, settings);
                    results.totalScanned++;
                    
                    if (stock) {
                        if (stock.isBreakout) {
                            results.breakoutStocks.push(stock);
                            console.log(`üöÄ ÎèåÌåå Î∞úÍ≤¨: ${ticker} $${stock.currentPrice.toFixed(2)} (ÏßÑÏûÖÍ∞Ä: $${stock.entryPrice.toFixed(2)})`);
                        } else {
                            results.waitingStocks.push(stock);
                            console.log(`‚è∞ ÎåÄÍ∏∞ Ï§ë: ${ticker} $${(stock.currentPrice || 0).toFixed(2)} (ÏßÑÏûÖÍπåÏßÄ: $${(stock.gapToEntry || 0).toFixed(2)})`);
                        }

                        // ÏÉÅÏÑ∏ Î°úÍ∑∏ (ÎîîÎ≤ÑÍπÖÏö©)
                        console.debug(`üìä ${ticker} Î∂ÑÏÑùÍ≤∞Í≥º:`, {
                            ÌòÑÏû¨Í∞Ä: stock.currentPrice.toFixed(2),
                            ÏßÑÏûÖÍ∞Ä: stock.entryPrice.toFixed(2),
                            Î≥ÄÎèôÎ•†: stock.volatility.toFixed(1) + '%',
                            Í±∞ÎûòÎüâ: stock.volume.toLocaleString(),
                            ÎèåÌååÏó¨Î∂Ä: stock.isBreakout ? '‚úÖ' : '‚ùå',
                            Ï°∞Í±¥ÎßåÏ°±: stock.meetsConditions ? '‚úÖ' : '‚ùå'
                        });
                    } else {
                        results.errors++;
                        console.warn(`‚ùå ${ticker} Î∂ÑÏÑù Ïã§Ìå®: Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå ÎòêÎäî Í≥ÑÏÇ∞ Ïò§Î•ò`);
                    }
                } catch (error) {
                    results.errors++;
                    console.error(`‚ùå ${ticker} Î∂ÑÏÑù Ïã§Ìå®:`, error.message);
                    // Ïã§Ìå®Ìïú Ìï≠Î™©ÏùÑ Î∞∞Ïó¥Ïóê Ï∂îÍ∞Ä
                    failedTickers.push(ticker);
                }
                
                // Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ (5Í∞úÎßàÎã§)
                if ((i + 1) % 5 === 0 || (stock && stock.isBreakout)) {
                    this.updateDashboard(results);
                }
                
                // ÎîúÎ†àÏù¥ (API Ï†úÌïú Î∞©ÏßÄ) - ÌîÑÎ°úÍ∑∏ÎûòÏä§ ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑÏóê Ïã§Ìñâ
                await this.delay(this.demoMode ? 50 : 200);
            }
            
            // Ïã§Ìå®Ìïú Ìï≠Î™©Îì§Ïù¥ ÏûàÏúºÎ©¥ Îß® Îí§Ïóê Ï∂îÍ∞ÄÌï¥ÏÑú Ïû¨ÏãúÎèÑ
            if (failedTickers.length > 0) {
                console.log(`üîÑ Ïã§Ìå®Ìïú ${failedTickers.length}Í∞ú Ìï≠Î™©ÏùÑ Ïû¨ÏãúÎèÑÌï©ÎãàÎã§...`);
                
                for (let i = 0; i < failedTickers.length; i++) {
                    const ticker = failedTickers[i];
                    const progress = Math.round(((results.totalScanned + i + 1) / (totalTickers + failedTickers.length)) * 100);
                    
                    this.updateStatus(`Ïû¨ÏãúÎèÑ Ï§ë... ${ticker} (${results.totalScanned + i + 1}/${totalTickers + failedTickers.length}) ${progress}%`, 'scanning');
                    
                    try {
                        const stock = await this.analyzeStock(ticker, settings);
                        results.totalScanned++;
                        
                        if (stock) {
                            if (stock.isBreakout) {
                                results.breakoutStocks.push(stock);
                                console.log(`üöÄ Ïû¨ÏãúÎèÑ ÏÑ±Í≥µ - ÎèåÌåå Î∞úÍ≤¨: ${ticker} $${stock.currentPrice.toFixed(2)} (ÏßÑÏûÖÍ∞Ä: $${stock.entryPrice.toFixed(2)})`);
                            } else {
                                results.waitingStocks.push(stock);
                                console.log(`‚è∞ Ïû¨ÏãúÎèÑ ÏÑ±Í≥µ - ÎåÄÍ∏∞ Ï§ë: ${ticker} $${stock.currentPrice.toFixed(2)} (ÏßÑÏûÖÍπåÏßÄ: $${stock.gapToEntry.toFixed(2)})`);
                            }
                        } else {
                            console.warn(`‚ùå ${ticker} Ïû¨ÏãúÎèÑ Ïã§Ìå®: Ï°∞Í±¥ Î∂àÎßåÏ°±`);
                        }
                    } catch (error) {
                        console.error(`‚ùå ${ticker} Ïû¨ÏãúÎèÑ Ïã§Ìå®:`, error.message);
                    }
                    
                    // Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ (5Í∞úÎßàÎã§)
                    if ((i + 1) % 5 === 0) {
                        this.updateDashboard(results);
                    }
                    
                    // ÎîúÎ†àÏù¥ (API Ï†úÌïú Î∞©ÏßÄ) - ÌîÑÎ°úÍ∑∏ÎûòÏä§ ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑÏóê Ïã§Ìñâ
                    await this.delay(this.demoMode ? 50 : 200);
                }
            }
            
            // Í≤∞Í≥º Ï†ïÎ†¨
            results.waitingStocks.sort((a, b) => a.gapToEntry - b.gapToEntry);
            results.breakoutStocks.sort((a, b) => b.score - a.score);
            
            // ÏÉÅÏúÑ Í≤∞Í≥ºÎßå Ïú†ÏßÄ
            results.waitingStocks = results.waitingStocks.slice(0, 15);
            results.breakoutStocks = results.breakoutStocks.slice(0, 10);
            
            // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•
            StorageManager.saveResults(results);
            
            // UI ÏóÖÎç∞Ïù¥Ìä∏
            this.displayResults(results);
            
            // ÎèåÌåå ÏïåÎ¶º
            if (results.breakoutStocks.length > 0 && typeof NotificationManager !== 'undefined') {
                NotificationManager.sendBreakoutAlert(results.breakoutStocks);
            }
            
            this.updateStatus(`ÏôÑÎ£å: ${results.totalScanned}Í∞ú Ïä§Ï∫î (ÎèåÌåå: ${results.breakoutStocks.length}, ÎåÄÍ∏∞: ${results.waitingStocks.length})`, 'completed');
            
            // Ïä§Ï∫î ÏôÑÎ£å ÌõÑ Ï¥ù Ï°∞ÌöåÏàò Î°úÍ∑∏
            if (window.logger) {
                window.logger.success(`Ïä§Ï∫î ÏôÑÎ£å: Ï¥ù ${results.totalScanned}Í∞ú Ï¢ÖÎ™© Ï°∞Ìöå ÏôÑÎ£å`);
            }
            
            
            
        } catch (error) {
            console.error('Ïä§Ï∫î Ï§ë Ïò§Î•ò:', error);
            this.updateStatus('Ïä§Ï∫î Ïã§Ìå®', 'error');
            
        } finally {
            this.isScanning = false;
            
        }
    }

    async smartScanStocks() {
        if (this.isScanning) return;
        
        console.log('üöÄ Ïä§ÎßàÌä∏ Ïä§Ï∫î Ï†ÑÎûµ ÏãúÏûë...');
        this.isScanning = true;
        this.updateStatus('Ïä§ÎßàÌä∏ Ïä§Ï∫î Ï§ë...', 'scanning');
        
        
        
        try {
            // Ïä§ÎßàÌä∏ Ïä§Ï∫êÎÑàÏùò Ï†ÅÏùëÌòï Ïä§Ï∫î ÏÇ¨Ïö©
            const results = await window.smartScanner.adaptiveScan(this.sp500Tickers);
            
            // Í∏∞Î≥∏ Í≤∞Í≥º Íµ¨Ï°∞Î°ú Î≥ÄÌôò
            const formattedResults = {
                breakoutStocks: results.breakoutStocks || [],
                waitingStocks: results.waitingStocks || [],
                totalScanned: results.totalScanned || 0,
                errors: results.errors || 0,
                strategy: results.strategy || 'adaptive',
                timestamp: new Date().toISOString()
            };
            
            // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•
            StorageManager.saveResults(formattedResults);
            
            // UI ÏóÖÎç∞Ïù¥Ìä∏
            this.displayResults(formattedResults);
            
            // ÎèåÌåå ÏïåÎ¶º
            if (formattedResults.breakoutStocks.length > 0 && typeof NotificationManager !== 'undefined') {
                NotificationManager.sendBreakoutAlert(formattedResults.breakoutStocks);
            }
            
            const statusMessage = `Ïä§ÎßàÌä∏ Ïä§Ï∫î ÏôÑÎ£å (${results.strategy}): ${formattedResults.totalScanned}Í∞ú Ïä§Ï∫î ` +
                `(ÎèåÌåå: ${formattedResults.breakoutStocks.length}, ÎåÄÍ∏∞: ${formattedResults.waitingStocks.length})`;
            
            console.log(`‚úÖ ${statusMessage}`);
            this.updateStatus(statusMessage, 'completed');
            
            // Ïä§ÎßàÌä∏ Ïä§Ï∫î ÏôÑÎ£å ÌõÑ Ï¥ù Ï°∞ÌöåÏàò Î°úÍ∑∏
            if (window.logger) {
                window.logger.success(`Ïä§ÎßàÌä∏ Ïä§Ï∫î ÏôÑÎ£å: Ï¥ù ${formattedResults.totalScanned}Í∞ú Ï¢ÖÎ™© Ï°∞Ìöå ÏôÑÎ£å`);
            }
            
            // ÏßÑÌñâ ÏÉÅÌô© ÏµúÏ¢Ö ÏóÖÎç∞Ïù¥Ìä∏
            this.updateProgressDisplay(formattedResults.totalScanned, formattedResults.totalScanned, 'ÏôÑÎ£å', 'completed', formattedResults);
            
            
        } catch (error) {
            console.error('‚ùå Ïä§ÎßàÌä∏ Ïä§Ï∫î Ï§ë Ïò§Î•ò:', error);
            this.updateStatus('Ïä§ÎßàÌä∏ Ïä§Ï∫î Ïã§Ìå® - Í∏∞Î≥∏ Ïä§Ï∫îÏúºÎ°ú Ï†ÑÌôò', 'error');
            
            
            // ÏóêÎü¨ Ïãú Í∏∞Î≥∏ Ïä§Ï∫îÏúºÎ°ú Ìè¥Î∞±
            setTimeout(() => {
                this.scanStocks();
            }, 2000);
            
        } finally {
            this.isScanning = false;
            
        }
    }

    async analyzeStock(ticker, settings, preLoadedData = null) {
        try {
            let stockData;
            
            let apiData;
            
            if (preLoadedData) {
                // ÎØ∏Î¶¨ Î°úÎìúÎêú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö© (Ï§ëÎ≥µ Ìò∏Ï∂ú Î∞©ÏßÄ)
                apiData = preLoadedData;
            } else {
                // Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ ÏÉàÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞
                apiData = await this.fetchStockData(ticker);
            }
            
            if (this.demoMode) {
                // Îç∞Î™® Î™®Îìú: ÎØ∏Î¶¨ Î°úÎìúÎêú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùÑ ÎïåÎßå Î™®Ïùò Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
                stockData = apiData || this.generateDemoData(ticker);
            } else {
                // Ïã§Ï†ú API Î™®Îìú
                
                if (!apiData) {
                    return null;
                }
                
                // API ManagerÏóêÏÑú Î∞òÌôòÎêú Îç∞Ïù¥ÌÑ∞Í∞Ä Ïù¥ÎØ∏ Î≥ÄÌôòÎêú ÌòïÌÉúÏù∏ÏßÄ ÌôïÏù∏
                if (apiData.currentPrice && apiData.yesterdayClose) {
                    // Ïù¥ÎØ∏ Î≥ÄÌôòÎêú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö© (Ï§ëÎ≥µ Ìò∏Ï∂ú Î∞©ÏßÄ)
                    stockData = apiData;
                } else if (apiData.timeSeries) {
                    // Alpha Vantage API ÏùëÎãµ Ï≤òÎ¶¨
                    const dates = Object.keys(apiData.timeSeries).sort().reverse();
                    if (dates.length < 2) return null;
                    
                    // Ïò§ÎäòÏù¥ 2025-07-11 (Í∏àÏöîÏùº)Ïù¥ÎØÄÎ°ú Í∞ÄÏû• ÏµúÍ∑º Í±∞ÎûòÏùº Ï∞æÍ∏∞
                    const latestDate = dates[0]; // Í∞ÄÏû• ÏµúÍ∑º ÎÇ†Ïßú
                    const previousDate = dates[1]; // Í∑∏ Ï†Ñ Í±∞ÎûòÏùº
                    
                    console.log(`üìÖ ${ticker} Îç∞Ïù¥ÌÑ∞ ÎÇ†Ïßú: ÏµúÍ∑º=${latestDate}, Ïù¥Ï†Ñ=${previousDate}`);
                    
                    const today = apiData.timeSeries[latestDate];
                    const yesterday = apiData.timeSeries[previousDate];
                    
                    stockData = {
                        currentPrice: parseFloat(today['4. close']),
                        yesterdayClose: parseFloat(yesterday['4. close']),
                        yesterdayHigh: parseFloat(yesterday['2. high']),
                        yesterdayLow: parseFloat(yesterday['3. low']),
                        volume: parseInt(yesterday['5. volume'])
                    };
                } else {
                    console.warn(`‚ùå ${ticker}: ÏßÄÏõêÎêòÏßÄ ÏïäÎäî Îç∞Ïù¥ÌÑ∞ ÌòïÏãù`);
                    return null;
                }
            }
            
            // Î≥ÄÎèôÏÑ± ÎèåÌåå Í≥ÑÏÇ∞
            const calculation = VolatilityCalculator.calculate(stockData, settings);
            
            if (!calculation) {
                return null; // Í≥ÑÏÇ∞ ÏûêÏ≤¥Í∞Ä Ïã§Ìå®Ìïú Í≤ΩÏö∞Îßå Ï†úÏô∏
            }
            
            // Ï°∞Í±¥ÏùÑ ÎßåÏ°±ÌïòÏßÄ ÏïäÏïÑÎèÑ Í≤∞Í≥ºÏóê Ìè¨Ìï® (ÎåÄÍ∏∞ Ï¢ÖÎ™©ÏúºÎ°ú Î∂ÑÎ•òÎê† Ïàò ÏûàÏùå)
            return {
                ticker,
                ...calculation,
                timestamp: new Date().toISOString()
            };
            
        } catch (error) {
            console.error(`${ticker} Î∂ÑÏÑù Ï§ë Ïò§Î•ò:`, error);
            return null;
        }
    }

    generateDemoData(ticker) {
        // ÏãúÎìúÍ∞íÏùÑ ÏúÑÌïú Í∞ÑÎã®Ìïú Ìï¥Ïãú Ìï®Ïàò
        const hash = ticker.split('').reduce((a, b) => {
            a = ((a << 5) - a) + b.charCodeAt(0);
            return a & a;
        }, 0);
        
        const random = (seed) => {
            const x = Math.sin(seed) * 10000;
            return x - Math.floor(x);
        };
        
        const basePrice = 30 + (random(hash) * 200); // $30-$230
        const volatility = 0.015 + (random(hash + 1) * 0.065); // 1.5-8%
        const volume = 800000 + (random(hash + 2) * 4000000); // 80Îßå-480ÎßåÏ£º
        
        const yesterdayClose = basePrice;
        const dailyRange = yesterdayClose * volatility;
        const yesterdayLow = yesterdayClose - (dailyRange * 0.4);
        const yesterdayHigh = yesterdayLow + dailyRange;
        
        // ÌòÑÏû¨Í∞ÄÎäî ÎûúÎç§ÌïòÍ≤å ÏÑ§Ï†ï (ÏùºÎ∂ÄÎäî ÎèåÌåå, ÏùºÎ∂ÄÎäî ÎåÄÍ∏∞)
        const breakoutChance = random(hash + 3);
        const entryPrice = yesterdayClose + (dailyRange * 0.6);
        
        let currentPrice;
        if (breakoutChance < 0.15) {
            // 15% ÌôïÎ•†Î°ú ÎèåÌåå
            currentPrice = entryPrice + (random(hash + 4) * dailyRange * 0.4);
        } else {
            // 85% ÌôïÎ•†Î°ú ÎåÄÍ∏∞
            currentPrice = yesterdayClose + (random(hash + 5) * dailyRange * 0.5);
        }
        
        return {
            currentPrice,
            yesterdayClose,
            yesterdayHigh,
            yesterdayLow,
            volume: Math.floor(volume)
        };
    }

    async fetchStockData(ticker) {
        // Îç∞Î™® Î™®Îìú ÌôïÏù∏
        if (this.demoMode) {
            return this.generateDemoData(ticker);
        }

        try {
            // ÏÉàÎ°úÏö¥ API Manager ÏÇ¨Ïö© (Îã§Ï§ë ÏÜåÏä§)
            if (window.APIManager) {
                const apiManager = new window.APIManager();
                console.log(`üì° ${ticker}: API ManagerÎ°ú Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠...`);
                const stockData = await apiManager.fetchStockData(ticker);
                
                if (stockData) {
                    stockData.ticker = ticker;
                    console.log(`‚úÖ ${ticker}: Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏÑ±Í≥µ - $${stockData.currentPrice?.toFixed(2) || 'N/A'}`);
                    return stockData;
                }
            }
            
        } catch (error) {
            console.warn(`‚ùå ${ticker} Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:`, error.message);
        }
        
        return null;
    }

    displayResults(results) {
        // Í≤∞Í≥º Ï†ÄÏû• (ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏Ïö©)
        this.lastScanResults = results;
        
        // ÎåÄÏãúÎ≥¥Îìú ÏóÖÎç∞Ïù¥Ìä∏
        this.updateDashboard(results);
        
        // ÎèåÌåå Ï¢ÖÎ™© ÌëúÏãú
        this.renderStockCards('breakoutStocks', results.breakoutStocks, 'breakout');
        
        // ÎåÄÍ∏∞ Ï¢ÖÎ™© ÌëúÏãú
        this.renderStockCards('waitingStocks', results.waitingStocks, 'waiting');
        
        // Ïä§Ï∫î ÏôÑÎ£å ÌõÑ ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë (ÏÑ§Ï†ïÏóêÏÑú ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞ + Ïä§Ï∫î Í≤∞Í≥ºÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ + Ïã§Ï†ú Ïä§Ï∫îÏù¥ ÏôÑÎ£åÎêú Í≤ΩÏö∞Îßå)
        const settings = StorageManager.getSettings();
        
        const hasResults = (results.breakoutStocks && results.breakoutStocks.length > 0) || 
                          (results.waitingStocks && results.waitingStocks.length > 0);
        
        // Ïã§Ï†ú Ïä§Ï∫îÏù¥ ÏôÑÎ£åÎêú Í≤ΩÏö∞ÏóêÎßå ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë (Ï∫êÏãú Î°úÎìúÏãúÏóêÎäî ÏãúÏûëÌïòÏßÄ ÏïäÏùå)
        const isFromActualScan = this.isScanning || this.lastScanResults === null;
        
        if (!this.autoUpdateEnabled && settings.autoUpdateEnabled && hasResults && isFromActualScan) {
            this.startAutoUpdate();
        }
    }

    updateDashboard(results) {
        // ÌÜµÌï©Îêú ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        const breakoutCountEl = document.getElementById('breakoutCount');
        const waitingCountEl = document.getElementById('waitingCount');
        const totalScannedEl = document.getElementById('totalScanned');
        const errorCountEl = document.getElementById('errorCount');
        
        // Ïï†ÎãàÎ©îÏù¥ÏÖòÍ≥º Ìï®Íªò Í∞í ÏóÖÎç∞Ïù¥Ìä∏
        this.updateStatWithAnimation(breakoutCountEl, results.breakoutStocks.length);
        this.updateStatWithAnimation(waitingCountEl, results.waitingStocks.length);
        this.updateStatWithAnimation(totalScannedEl, results.totalScanned);
        this.updateStatWithAnimation(errorCountEl, results.errorCount || 0);
        
        // ÏßÑÌñâ Ï§ëÏùº Îïå Ïã§ÏãúÍ∞Ñ Í≤∞Í≥º ÌëúÏãú
        if (results.breakoutStocks.length > 0) {
            this.renderStockCards('breakoutStocks', results.breakoutStocks.slice(0, 10), 'breakout');
        }
        
        if (results.waitingStocks.length > 0) {
            this.renderStockCards('waitingStocks', results.waitingStocks.slice(0, 15), 'waiting');
        }
    }

    renderStockCards(containerId, stocks, type) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        container.innerHTML = '';
        
        if (stocks.length === 0) {
            container.innerHTML = '<div class="no-results">Ï°∞Í±¥Ïóê ÎßûÎäî Ï¢ÖÎ™©Ïù¥ ÏóÜÏäµÎãàÎã§.</div>';
            return;
        }
        
        stocks.forEach(stock => {
            const card = document.createElement('div');
            card.className = `stock-card ${type}`;
            card.onclick = () => this.openStockChart(stock.ticker);
            
            let gapDisplay, strategyDisplay = '';
            
            if (type === 'waiting') {
                gapDisplay = `<div class="gap">ÎèåÌååÍπåÏßÄ: $${(stock.gapToEntry || 0).toFixed(2)}</div>`;
            } else {
                // ÎèåÌååÌïú Ï¢ÖÎ™©Ïóê ÎåÄÌïú ÏßÑÏûÖ Ï†ÑÎûµ Í≤∞Ï†ï
                const entryStrategy = this.determineEntryStrategy(stock);
                let strategyIcon = '';
                let strategyColor = '';
                
                switch(entryStrategy.confidence) {
                    case 'high': strategyIcon = 'üü¢'; strategyColor = '#16a34a'; break;
                    case 'medium': strategyIcon = 'üü°'; strategyColor = '#d97706'; break;
                    case 'low': strategyIcon = 'üî¥'; strategyColor = '#dc2626'; break;
                }
                
                gapDisplay = '<div class="breakout-badge">ÎèåÌåå!</div>';
                strategyDisplay = `
                    <div class="strategy-info" style="margin-top: 8px; padding: 6px; background: rgba(0,0,0,0.05); border-radius: 4px;">
                        <div style="font-size: 0.85em; color: ${strategyColor};">
                            ${strategyIcon} ${entryStrategy.name}
                        </div>
                        ${entryStrategy.note ? `<div style="font-size: 0.8em; color: #666; margin-top: 2px;">${entryStrategy.note}</div>` : ''}
                    </div>
                `;
            }
            
            const riskReward = stock.riskRewardRatio ? ` (R:R ${stock.riskRewardRatio.toFixed(1)}:1)` : '';
            
            card.innerHTML = `
                <div class="stock-header">
                    <h3>${stock.ticker}</h3>
                    ${gapDisplay}
                </div>
                <div class="price-info">
                    <div class="current-price">$${(stock.currentPrice || 0).toFixed(2)}</div>
                    <div class="entry-price">ÏßÑÏûÖ: $${(stock.entryPrice || 0).toFixed(2)}${riskReward}</div>
                </div>
                <div class="targets">
                    <div class="target stop-loss">ÏÜêÏ†à: $${(stock.stopLoss || 0).toFixed(2)}</div>
                    <div class="target profit">Î™©Ìëú1: $${(stock.target1 || 0).toFixed(2)}</div>
                    <div class="target profit">Î™©Ìëú2: $${(stock.target2 || 0).toFixed(2)}</div>
                </div>
                <div class="stats">
                    <span>Î≥ÄÎèôÎ•†: ${(stock.volatility || 0).toFixed(1)}%</span>
                    <span>Í±∞ÎûòÎüâ: ${this.formatNumber(stock.volume || stock.yesterdayVolume || 0)}</span>
                    <span>Ï†êÏàò: ${stock.score || 0}/100</span>
                </div>
                ${strategyDisplay}
            `;
            
            container.appendChild(card);
        });
    }

    // ÎèåÌåå ÌõÑ ÏßÑÏûÖ Ï†ÑÎûµ Í≤∞Ï†ï (breakout-tracker.jsÏôÄ ÎèôÏùºÌïú Î°úÏßÅ)
    determineEntryStrategy(stock) {
        const currentPrice = stock.currentPrice;
        const entryPrice = stock.entryPrice;
        const breakoutGap = ((currentPrice - entryPrice) / entryPrice) * 100;
        
        if (breakoutGap <= 1.0) {
            return {
                name: 'Ï¶âÏãú ÏßÑÏûÖ',
                confidence: 'high',
                note: '1% Ïù¥ÎÇ¥ ÎèåÌåå, ÎÜíÏùÄ ÏÑ±Í≥µÎ•†'
            };
        } else if (breakoutGap <= 2.5) {
            return {
                name: 'Î∂ÑÌï† ÏßÑÏûÖ',
                confidence: 'medium',
                note: '50% Ìè¨ÏßÄÏÖò, ÌíÄÎ∞± Ïãú Ï∂îÍ∞Ä'
            };
        } else if (breakoutGap <= 5.0) {
            return {
                name: 'ÌíÄÎ∞± ÎåÄÍ∏∞',
                confidence: 'medium',
                note: `${(entryPrice * 1.01).toFixed(2)} ÎêòÎèåÎ¶º ÎåÄÍ∏∞`
            };
        } else {
            return {
                name: 'Í¥ÄÎßù',
                confidence: 'low',
                note: `ÎèåÌååÌè≠ ${breakoutGap.toFixed(1)}%Î°ú Ï∂îÍ≤© ÏúÑÌóò`
            };
        }
    }

    openStockChart(ticker) {
        // TradingView ÎòêÎäî Yahoo FinanceÎ°ú ÏÉà ÌÉ≠ÏóêÏÑú Ïó¥Í∏∞
        const url = `https://finance.yahoo.com/quote/${ticker}`;
        window.open(url, '_blank');
    }

    formatNumber(num) {
        if (!num || isNaN(num)) {
            return '0';
        }
        
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return num.toString();
    }

    // ÌÜµÍ≥Ñ Í∞í ÏóÖÎç∞Ïù¥Ìä∏ Ïãú Ïï†ÎãàÎ©îÏù¥ÏÖò Ï∂îÍ∞Ä
    updateStatWithAnimation(element, newValue) {
        if (!element) return;
        
        const currentValue = element.textContent;
        if (currentValue !== newValue.toString()) {
            element.textContent = newValue;
            element.classList.add('updated');
            
            // Ïï†ÎãàÎ©îÏù¥ÏÖò ÏôÑÎ£å ÌõÑ ÌÅ¥ÎûòÏä§ Ï†úÍ±∞
            setTimeout(() => {
                element.classList.remove('updated');
            }, 600);
        }
    }

    updateStatus(message, type = 'default') {
        const statusEl = document.getElementById('status');
        const scanBtn = document.getElementById('scanBtn');
        
        if (statusEl) {
            statusEl.textContent = message;
            statusEl.className = `status status-${type}`;
            statusEl.style.display = 'block';
        }
        
        // Ïä§Ï∫î Î≤ÑÌäº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        if (scanBtn) {
            const btnIcon = scanBtn.querySelector('.btn-icon');
            const btnTitle = scanBtn.querySelector('.btn-title');
            const btnSubtitle = scanBtn.querySelector('.btn-subtitle');
            
            if (type === 'scanning') {
                scanBtn.disabled = true;
                if (btnIcon) btnIcon.textContent = 'üîÑ';
                if (btnTitle) btnTitle.textContent = 'Ïä§Ï∫î Ï§ë...';
                if (btnSubtitle) btnSubtitle.textContent = 'Î∂ÑÏÑù ÏßÑÌñâ Ï§ë';
            } else {
                scanBtn.disabled = false;
                if (btnIcon) btnIcon.textContent = 'üöÄ';
                if (btnTitle) btnTitle.textContent = 'Ïä§ÎßàÌä∏ Ïä§Ï∫î';
                if (btnSubtitle) btnSubtitle.textContent = 'S&P 500 ÎèåÌåå Ï†ÑÎûµ Î∂ÑÏÑù';
            }
        }
    }

    bindEvents() {
        // Ï†ÑÏ≤¥ Ïä§Ï∫î Î≤ÑÌäº (Í∏∞Ï°¥ Í∏∞Îä•)
        const scanBtn = document.getElementById('scanBtn');
        if (scanBtn) {
            scanBtn.addEventListener('click', () => {
                // Ïä§ÎßàÌä∏ Ïä§Ï∫êÎÑà ÏÇ¨Ïö© Ïó¨Î∂Ä ÌôïÏù∏
                if (window.smartScanner && !this.demoMode) {
                    console.log('üß† Ïä§ÎßàÌä∏ Ïä§Ï∫î Ï†ÑÎûµ ÏÇ¨Ïö©');
                    this.smartScanStocks();
                } else {
                    console.log('üìä Í∏∞Î≥∏ Ï†ÑÏ≤¥ Ïä§Ï∫î ÏÇ¨Ïö©');
                    this.scanStocks();
                }
            });
        }
        
        // ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ ÌÜ†Í∏Ä Î≤ÑÌäº
        const autoUpdateToggleBtn = document.getElementById('autoUpdateToggleBtn');
        if (autoUpdateToggleBtn) {
            autoUpdateToggleBtn.addEventListener('click', () => {
                this.toggleAutoUpdate();
            });
        }

        // Ïû¨ÌôïÏù∏ Î≤ÑÌäº Ïù¥Î≤§Ìä∏
        const reCheckBtn = document.getElementById('reCheckBtn');
        if (reCheckBtn) {
            reCheckBtn.addEventListener('click', () => {
                this.reCheckBreakoutStocks();
            });
        }

        // ÏûêÎèô Ïä§Ï∫î ÏÑ§Ï†ï
        const autoScanCheck = document.getElementById('autoScan');
        if (autoScanCheck) {
            autoScanCheck.addEventListener('change', (e) => {
                if (e.target.checked) {
                    this.startAutoScan();
                } else {
                    this.stopAutoScan();
                }
            });
        }
        
        // ÏÑ§Ï†ï Î≥ÄÍ≤Ω Í∞êÏßÄ
        const volatilityRange = document.getElementById('volatilityRange');
        if (volatilityRange) {
            volatilityRange.addEventListener('input', (e) => {
                const value = e.target.value;
                const valueDisplay = document.getElementById('volatilityValue');
                if (valueDisplay) {
                    valueDisplay.textContent = `2-${value}%`;
                }
                StorageManager.updateSettings({ volatilityMax: value / 100 });
            });
        }
        
        const minVolumeSelect = document.getElementById('minVolume');
        if (minVolumeSelect) {
            minVolumeSelect.addEventListener('change', (e) => {
                StorageManager.updateSettings({ minVolume: parseInt(e.target.value) });
            });
        }
        
        // Îç∞Î™® Î™®Îìú ÌÜ†Í∏Ä
        const demoModeCheck = document.getElementById('demoMode');
        if (demoModeCheck) {
            demoModeCheck.addEventListener('change', (e) => {
                this.demoMode = e.target.checked;
                StorageManager.updateSettings({ demoMode: e.target.checked });
                console.log(`Îç∞Î™® Î™®Îìú: ${this.demoMode ? 'ON' : 'OFF'}`);
            });
        }

        // ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ§Ï†ï
        const autoUpdateEnabledCheck = document.getElementById('autoUpdateEnabled');
        if (autoUpdateEnabledCheck) {
            autoUpdateEnabledCheck.addEventListener('change', (e) => {
                StorageManager.updateSettings({ autoUpdateEnabled: e.target.checked });
                console.log(`ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Í∏∞Î≥∏ ÌôúÏÑ±Ìôî: ${e.target.checked ? 'ON' : 'OFF'}`);
            });
        }

        const updateIntervalSelect = document.getElementById('updateInterval');
        if (updateIntervalSelect) {
            updateIntervalSelect.addEventListener('change', (e) => {
                const interval = parseInt(e.target.value);
                StorageManager.updateSettings({ updateInterval: interval });
                console.log(`ÏóÖÎç∞Ïù¥Ìä∏ Ï£ºÍ∏∞: ${interval}Ï¥à`);
                
                // ÏóÖÎç∞Ïù¥Ìä∏ Í∞ÑÍ≤© Ï¶âÏãú Ï†ÅÏö©
                this.updateIntervalMs = interval * 1000;
                
                // ÌòÑÏû¨ ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä Ïã§Ìñâ Ï§ëÏù¥Î©¥ Ïû¨ÏãúÏûë
                if (this.autoUpdateEnabled) {
                    this.stopAutoUpdate();
                    setTimeout(() => {
                        this.startAutoUpdate();
                    }, 500); // 500ms ÌõÑ Ïû¨ÏãúÏûë
                }
            });
        }


        // Î∏åÎùºÏö∞Ï†Ä ÏïåÎ¶º ÏÑ§Ï†ï
        const notificationEnabledCheck = document.getElementById('notificationEnabled');
        if (notificationEnabledCheck) {
            notificationEnabledCheck.addEventListener('change', (e) => {
                StorageManager.updateSettings({ notificationEnabled: e.target.checked });
                console.log(`Î∏åÎùºÏö∞Ï†Ä ÏïåÎ¶º: ${e.target.checked ? 'ON' : 'OFF'}`);
            });
        }
    }

    startAutoScan() {
        this.autoScanInterval = setInterval(() => {
            if (!this.isScanning) {
                this.scanStocks();
            }
        }, 5 * 60 * 1000); // 5Î∂ÑÎßàÎã§
        console.log('‚úÖ ÏûêÎèô Ïä§Ï∫î ÏãúÏûëÎê® (5Î∂Ñ Í∞ÑÍ≤©)');
    }

    stopAutoScan() {
        if (this.autoScanInterval) {
            clearInterval(this.autoScanInterval);
            this.autoScanInterval = null;
            console.log('‚èπÔ∏è ÏûêÎèô Ïä§Ï∫î Ï§ëÏßÄÎê®');
        }
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë (ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å ÌõÑ ÏÑ§Ï†ïÎêú Í∞ÑÍ≤©ÎßåÌÅº ÎåÄÍ∏∞)
    startAutoUpdate() {
        if (this.autoUpdateEnabled) {
            console.log('‚ö†Ô∏è ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§.');
            return;
        }
        
        this.autoUpdateEnabled = true;
        
        // Í∏∞Ï°¥ Ïä§ÏºÄÏ§Ñ Ï†ïÎ¶¨
        if (this.autoUpdateTimeout) {
            clearTimeout(this.autoUpdateTimeout);
            this.autoUpdateTimeout = null;
        }
        
        // Ï≤´ Î≤àÏß∏ ÏóÖÎç∞Ïù¥Ìä∏Îäî Ï¶âÏãú Ïã§Ìñâ
        this.scheduleNextUpdate(true);
        
        console.log(`üîÑ ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûëÎê® (${this.updateIntervalMs/1000}Ï¥à Í∞ÑÍ≤©)`);
        this.updateAutoUpdateButtonUI();
    }

    // Îã§Ïùå ÏóÖÎç∞Ïù¥Ìä∏ Ïä§ÏºÄÏ§ÑÎßÅ
    scheduleNextUpdate(immediate = false) {
        if (!this.autoUpdateEnabled) return;
        
        // Ïù¥ÎØ∏ Ïä§ÏºÄÏ§ÑÎêú ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÏûàÏúºÎ©¥ Ï∑®ÏÜå
        if (this.autoUpdateTimeout) {
            clearTimeout(this.autoUpdateTimeout);
            this.autoUpdateTimeout = null;
        }
        
        if (immediate) {
            // Ï¶âÏãú Ïã§Ìñâ (Ï≤´ Î≤àÏß∏ ÏóÖÎç∞Ïù¥Ìä∏)
            this.executeUpdate();
        } else {
            // ÎåÄÍ∏∞ ÏãúÍ∞Ñ ÌõÑ Ïã§Ìñâ - ÏßÑÌñâ ÌëúÏãúÍ∏∞ ÏãúÏûë
            this.startProgressIndicator();
            
            this.autoUpdateTimeout = setTimeout(() => {
                if (!this.autoUpdateEnabled) return;
                this.executeUpdate();
            }, this.updateIntervalMs);
            
            console.log(`‚è∞ Îã§Ïùå ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ${this.updateIntervalMs/1000}Ï¥à ÌõÑ Ïä§ÏºÄÏ§ÑÎê®`);
        }
    }

    // ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ
    async executeUpdate() {
        if (!this.autoUpdateEnabled) return;
        
        // Ïù¥ÎØ∏ ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä Ïã§Ìñâ Ï§ëÏù¥Î©¥ Í±¥ÎÑàÎõ∞Í∏∞
        if (this.isAutoUpdating) {
            console.warn('‚ö†Ô∏è ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§. Í±¥ÎÑàÎúÅÎãàÎã§.');
            // Îã§Ïùå ÏóÖÎç∞Ïù¥Ìä∏ Ïä§ÏºÄÏ§ÑÎßÅ (Ï§ëÎ≥µ Î∞©ÏßÄ)
            this.scheduleNextUpdate();
            return;
        }
        
        // ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ ÏÉÅÌÉú ÏÑ§Ï†ï
        this.isAutoUpdating = true;
        
        // ÏßÑÌñâ ÌëúÏãúÍ∏∞ Ï§ëÏßÄ (ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë)
        this.stopProgressIndicator();
        
        // ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë ÏÉÅÌÉú ÌëúÏãú
        const timerEl = document.getElementById('autoUpdateTimer');
        if (timerEl) {
            timerEl.textContent = 'ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...';
        }
        
        try {
            console.log('üîÑ ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ ÏãúÏûë...');
            await this.performAutoUpdate();
            console.log('‚úÖ ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ ÏôÑÎ£å');
        } catch (error) {
            console.error('‚ùå ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ Ï§ë Ïò§Î•ò:', error);
        } finally {
            // ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å ÏÉÅÌÉúÎ°ú Î≥µÏõê
            this.isAutoUpdating = false;
        }
        
        // ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å ÌõÑ Îã§Ïùå ÏóÖÎç∞Ïù¥Ìä∏ Ïä§ÏºÄÏ§ÑÎßÅ
        this.scheduleNextUpdate();
    }

    // ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ï§ëÏßÄ
    stopAutoUpdate() {
        if (this.autoUpdateEnabled) {
            this.autoUpdateEnabled = false;
            
            // Ïä§ÏºÄÏ§ÑÎêú ÏóÖÎç∞Ïù¥Ìä∏ Ï∑®ÏÜå
            if (this.autoUpdateTimeout) {
                clearTimeout(this.autoUpdateTimeout);
                this.autoUpdateTimeout = null;
            }
            
            // ÏßÑÌñâ ÌëúÏãúÍ∏∞ Ï§ëÏßÄ
            this.stopProgressIndicator();
            
            // API ManagerÏùò ÎåÄÍ∏∞ Ï§ëÏù∏ ÏöîÏ≤≠Îì§ÎèÑ Ï∑®ÏÜå
            if (window.apiManager) {
                const wasActive = window.apiManager.isActive();
                if (wasActive) {
                    console.log('üõë API Manager ÏöîÏ≤≠ Ï∑®ÏÜå Ï§ë...');
                    window.apiManager.cancelAllRequests();
                }
            }
            
            // Ïã§Ìñâ Ï§ëÏù∏ ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÏûàÎã§Î©¥ ÏôÑÎ£åÎê† ÎïåÍπåÏßÄ Í∏∞Îã§Î¶¨ÎèÑÎ°ù ÌîåÎûòÍ∑∏Îßå ÏÑ§Ï†ï
            // (Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏ ÏûëÏóÖÏùÄ ÏôÑÎ£åÎê† ÎïåÍπåÏßÄ ÏßÑÌñâÎê®)
            if (this.isAutoUpdating) {
                console.log('‚èπÔ∏è ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ï§ëÏßÄ ÏöîÏ≤≠Îê® (ÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ ÏóÖÎç∞Ïù¥Ìä∏Îäî ÏôÑÎ£å ÌõÑ Ï§ëÏßÄ)');
            } else {
                console.log('‚èπÔ∏è ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ï§ëÏßÄÎê®');
            }
            
            this.updateAutoUpdateButtonUI();
        }
    }

    // ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ ÌÜ†Í∏Ä
    toggleAutoUpdate() {
        if (this.autoUpdateEnabled) {
            this.stopAutoUpdate();
        } else {
            // Ïä§Ï∫î Í≤∞Í≥ºÍ∞Ä ÏûàÏùÑ ÎïåÎßå ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë Í∞ÄÎä•
            if (this.lastScanResults && 
                (this.lastScanResults.breakoutStocks.length > 0 || this.lastScanResults.waitingStocks.length > 0)) {
                this.startAutoUpdate();
            } else {
                console.warn('‚ö†Ô∏è Ïä§Ï∫î Í≤∞Í≥ºÍ∞Ä ÏóÜÏñ¥ ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏Î•º ÏãúÏûëÌï† Ïàò ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä Ïä§Ï∫îÏùÑ Ïã§ÌñâÌïòÏÑ∏Ïöî.');
                this.updateStatus('Ïä§Ï∫î Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä Ïä§Ï∫îÏùÑ Ïã§ÌñâÌïòÏÑ∏Ïöî.', 'error');
            }
        }
    }

    // Ï†ÄÏû•Îêú Í≤∞Í≥ºÏóêÏÑú ÎèåÌååÏ¢ÖÎ™© Ïû¨ÌôïÏù∏
    async reCheckBreakoutStocks() {
        try {
            // Ï†ÄÏû•Îêú Í≤∞Í≥º Î∂àÎü¨Ïò§Í∏∞
            const savedResults = StorageManager.getResults();
            if (!savedResults) {
                alert('Ï†ÄÏû•Îêú Ïä§Ï∫î Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä Ïä§Ï∫îÏùÑ Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî.');
                return;
            }

            // Î™®Îì† Ï†ÄÏû•Îêú Ï¢ÖÎ™© ÏàòÏßë (ÎèåÌåå + ÎåÄÍ∏∞)
            const allStocks = [
                ...(savedResults.breakoutStocks || []),
                ...(savedResults.waitingStocks || [])
            ];

            if (allStocks.length === 0) {
                alert('Ïû¨ÌôïÏù∏Ìï† Ï¢ÖÎ™©Ïù¥ ÏóÜÏäµÎãàÎã§.');
                return;
            }

            this.updateStatus('Ï†ÄÏû•Îêú Ï¢ÖÎ™© Ïû¨ÌôïÏù∏ Ï§ë...', 'scanning');
            console.log(`üîç ${allStocks.length}Í∞ú Ï†ÄÏû•Îêú Ï¢ÖÎ™© Ïû¨ÌôïÏù∏ ÏãúÏûë...`);

            const reCheckResults = {
                breakoutStocks: [],
                waitingStocks: [],
                totalScanned: 0,
                errors: 0,
                timestamp: new Date().toISOString()
            };

            // Í∞Å Ï¢ÖÎ™©Ïóê ÎåÄÌï¥ ÌòÑÏû¨ ÏÉÅÌÉú Ïû¨ÌôïÏù∏
            for (let i = 0; i < allStocks.length; i++) {
                const stock = allStocks[i];
                
                try {
                    // ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏
                    const progress = Math.round(((i + 1) / allStocks.length) * 100);
                    this.updateStatus(`Ïû¨ÌôïÏù∏ Ï§ë... ${i + 1}/${allStocks.length} (${progress}%)`, 'scanning');
                    
                    // ÌòÑÏû¨ Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
                    const stockData = await this.fetchStockData(stock.ticker);
                    
                    if (stockData) {
                        // ÌòÑÏû¨ ÏÑ§Ï†ïÏúºÎ°ú Îã§Ïãú Î∂ÑÏÑù
                        const settings = StorageManager.getSettings();
                        const analysis = await this.analyzeStock(stock.ticker, settings, stockData);
                        
                        if (analysis) {
                            // ÎèåÌåå/ÎåÄÍ∏∞ Î∂ÑÎ•ò (isBreakout ÏÜçÏÑ± ÏÇ¨Ïö©)
                            if (analysis.isBreakout) {
                                reCheckResults.breakoutStocks.push(analysis);
                                console.log(`üöÄ Ïû¨ÌôïÏù∏ ÎèåÌåå: ${stock.ticker} - ÌòÑÏû¨Í∞Ä: $${analysis.currentPrice.toFixed(2)}, ÏßÑÏûÖÍ∞Ä: $${analysis.entryPrice.toFixed(2)}`);
                            } else {
                                reCheckResults.waitingStocks.push(analysis);
                                console.log(`‚è∞ Ïû¨ÌôïÏù∏ ÎåÄÍ∏∞: ${stock.ticker} - ÌòÑÏû¨Í∞Ä: $${analysis.currentPrice.toFixed(2)}, ÏßÑÏûÖÍ∞Ä: $${analysis.entryPrice.toFixed(2)}, Ï°∞Í±¥ÎßåÏ°±: ${analysis.meetsConditions}`);
                            }
                            reCheckResults.totalScanned++;
                        } else {
                            console.warn(`‚ùå ${stock.ticker} Ïû¨ÌôïÏù∏ Ïã§Ìå®: Î∂ÑÏÑù Í≤∞Í≥º ÏóÜÏùå`);
                        }
                    } else {
                        console.warn(`‚ùå ${stock.ticker} Ïû¨ÌôïÏù∏ Ïã§Ìå®: Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®`);
                        reCheckResults.errors++;
                    }
                    
                    // API Î∂ÄÌïò Î∞©ÏßÄÎ•º ÏúÑÌïú ÎîúÎ†àÏù¥
                    if (i < allStocks.length - 1) {
                        await this.delay(1000);
                    }
                    
                } catch (error) {
                    console.warn(`‚ùå ${stock.ticker} Ïû¨ÌôïÏù∏ Ïã§Ìå®:`, error);
                    reCheckResults.errors++;
                }
            }

            // Í≤∞Í≥º Ï†ÄÏû• Î∞è ÌëúÏãú
            this.lastScanResults = reCheckResults;
            StorageManager.saveResults(reCheckResults);
            this.displayResults(reCheckResults);

            // ÏôÑÎ£å Î©îÏãúÏßÄ
            const statusMessage = `Ïû¨ÌôïÏù∏ ÏôÑÎ£å: ${reCheckResults.totalScanned}Í∞ú Ï¢ÖÎ™© ` +
                `(ÎèåÌåå: ${reCheckResults.breakoutStocks.length}, ÎåÄÍ∏∞: ${reCheckResults.waitingStocks.length})`;
            
            this.updateStatus(statusMessage, 'completed');
            console.log(`‚úÖ ${statusMessage}`);

            // ÎèåÌåå ÏïåÎ¶º
            if (reCheckResults.breakoutStocks.length > 0 && typeof NotificationManager !== 'undefined') {
                NotificationManager.sendBreakoutAlert(reCheckResults.breakoutStocks);
            }

            // ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ïû¨ÏãúÏûë
            const settings = StorageManager.getSettings();
            if (!this.autoUpdateEnabled && settings.autoUpdateEnabled) {
                this.startAutoUpdate();
            }

        } catch (error) {
            console.error('‚ùå Ïû¨ÌôïÏù∏ Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
            this.updateStatus('Ïû¨ÌôïÏù∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', 'error');
        }
    }

    // Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Í∏∞Ï°¥ Ï¢ÖÎ™©Îì§Ïùò ÌòÑÏû¨Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏ (Î™®Îì† Ï¢ÖÎ™©ÏùÑ ÎèôÏ†ÅÏúºÎ°ú Ï°∞Ìöå)
    async performAutoUpdate() {
        // Í∏∞Î≥∏ Ï°∞Í±¥ ÌôïÏù∏
        if (!this.lastScanResults || this.isScanning) return;
        
        // ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÎπÑÌôúÏÑ±ÌôîÎêòÏóàÏúºÎ©¥ Ï§ëÎã®
        if (!this.autoUpdateEnabled) {
            console.log('‚èπÔ∏è ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÎπÑÌôúÏÑ±ÌôîÎêòÏñ¥ Ï§ëÎã®Îê®');
            return;
        }

        console.log('üîÑ ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ Ï§ë...');
        
        try {
            const allStocks = [
                ...this.lastScanResults.breakoutStocks,
                ...this.lastScanResults.waitingStocks
            ];

            if (allStocks.length === 0) return;

            let updatedCount = 0;
            let successCount = 0;
            let failedCount = 0;

            // Î™®Îì† Ï¢ÖÎ™©ÏùÑ ÎèôÏ†ÅÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ (ÎûúÎç§ ÏÑ†ÌÉù ÏóÜÏù¥)
            console.log(`üìà ${allStocks.length}Í∞ú Ï¢ÖÎ™© Ï†ÑÏ≤¥ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë...`);

            for (const stock of allStocks) {
                // ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ï§ëÏßÄ ÏöîÏ≤≠Ïù¥ ÏûàÏúºÎ©¥ Ï¶âÏãú Ï§ëÎã®
                if (!this.autoUpdateEnabled) {
                    console.log('‚èπÔ∏è ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ï§ëÏßÄ ÏöîÏ≤≠ÏúºÎ°ú Ïù∏Ìïú Ï°∞Í∏∞ Ï¢ÖÎ£å');
                    break;
                }
                
                try {
                    if (this.demoMode) {
                        // Îç∞Î™® Î™®Îìú: ÎûúÎç§ Î≥ÄÎèô ÏãúÎÆ¨Î†àÏù¥ÏÖò
                        const volatility = Math.random() * 0.04 - 0.02; // ¬±2%
                        stock.currentPrice = Math.max(0.01, stock.currentPrice * (1 + volatility));
                        successCount++;
                    } else {
                        // Ïã§Ï†ú Î™®Îìú: APIÏóêÏÑú ÌòÑÏû¨Í∞Ä Í∞ÄÏ†∏Ïò§Í∏∞
                        const newPrice = await this.getCurrentPriceOnly(stock.ticker);
                        if (newPrice && newPrice > 0) {
                            stock.currentPrice = newPrice;
                            stock.lastUpdated = new Date();
                            successCount++;
                            console.log(`‚úÖ ${stock.ticker}: $${newPrice.toFixed(2)}`);
                        } else {
                            failedCount++;
                            console.warn(`‚ùå ${stock.ticker}: Í∞ÄÍ≤© Ï°∞Ìöå Ïã§Ìå®`);
                        }
                    }
                    
                    updatedCount++;
                    
                    // API Ï†úÌïú Í≥†Î†§ÌïòÏó¨ Ï†ÅÏ†àÌïú ÏßÄÏó∞
                    if (!this.demoMode) {
                        await this.delay(200); // 200ms ÏßÄÏó∞ÏúºÎ°ú API Î∂ÄÌïò Î∞©ÏßÄ
                    }
                    
                } catch (error) {
                    failedCount++;
                    console.warn(`‚ùå ${stock.ticker} ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:`, error.message);
                }
            }

            // ÏóÖÎç∞Ïù¥Ìä∏Îêú Í≤∞Í≥ºÎ°ú UI Í∞±Ïã†
            this.updateStockStatus();
            this.updateDashboard(this.lastScanResults);

            console.log(`‚úÖ ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: Ï†ÑÏ≤¥ ${updatedCount}Í∞ú, ÏÑ±Í≥µ ${successCount}Í∞ú, Ïã§Ìå® ${failedCount}Í∞ú`);
            
            // ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Ñ Í∏∞Î°ù
            this.lastUpdateTime = new Date();

        } catch (error) {
            console.error('‚ùå ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
        }
    }

    // ÌòÑÏû¨Í∞ÄÎßå Í∞ÄÏ†∏Ïò§Îäî Î©îÏÑúÎìú (Ï†ÑÏ≤¥ Ïä§Ï∫îÍ≥º ÎèôÏùºÌïú API ÏÇ¨Ïö©)
    async getCurrentPriceOnly(ticker) {
        try {
            if (this.demoMode) {
                // Îç∞Î™® Î™®ÎìúÏóêÏÑúÎäî ÎûúÎç§ Í∞ÄÍ≤© Î∞òÌôò
                return 50 + Math.random() * 100;
            }

            // Ï†ÑÏ≤¥ Ïä§Ï∫îÍ≥º ÎèôÏùºÌïú API Manager ÏÇ¨Ïö©
            if (window.APIManager) {
                const apiManager = new window.APIManager();
                const stockData = await apiManager.fetchStockData(ticker);
                
                if (stockData && stockData.currentPrice) {
                    return stockData.currentPrice;
                }
            }

            Utils.delay(1000); // API Ìò∏Ï∂ú Í∞Ñ ÏßÄÏó∞
            
            // API ManagerÍ∞Ä Ïã§Ìå®Ìïú Í≤ΩÏö∞ fetchStockData ÏÇ¨Ïö© (Î∞±ÏóÖ)
            // const fullData = await this.fetchStockData(ticker);
            // if (fullData && fullData.currentPrice) {
            //     return fullData.currentPrice;
            // }
            
        } catch (error) {
            console.warn(`‚ùå ${ticker} ÌòÑÏû¨Í∞Ä Ï°∞Ìöå Ïã§Ìå®:`, error.message);
        }
        return null;
    }

    // ÎèåÌåå/ÎåÄÍ∏∞ ÏÉÅÌÉú Ïû¨ÌèâÍ∞Ä
    updateStockStatus() {
        if (!this.lastScanResults) return;

        let statusChanged = false;

        // ÎåÄÍ∏∞ Ï¢ÖÎ™© Ï§ë ÎèåÌååÌïú Í≤ÉÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
        const stillWaiting = [];
        for (const stock of this.lastScanResults.waitingStocks) {
            if (stock.currentPrice >= stock.entryPrice) {
                // ÎèåÌåå Î∞úÏÉù!
                this.lastScanResults.breakoutStocks.push(stock);
                statusChanged = true;
                console.log(`üöÄ ÏÉàÎ°úÏö¥ ÎèåÌåå: ${stock.ticker} $${stock.currentPrice.toFixed(2)}`);
                
                // Î∏åÎùºÏö∞Ï†Ä ÏïåÎ¶º (Í∞ÄÎä•Ìïú Í≤ΩÏö∞)
                this.showBreakoutNotification(stock);
            } else {
                stillWaiting.push(stock);
            }
        }

        this.lastScanResults.waitingStocks = stillWaiting;

        if (statusChanged) {
            // ÏÉÅÌÉúÍ∞Ä Î≥ÄÍ≤ΩÎêú Í≤ΩÏö∞ÏóêÎßå UI Ï†ÑÏ≤¥ Í∞±Ïã†
            this.renderStockCards('breakoutStocks', this.lastScanResults.breakoutStocks, 'breakout');
            this.renderStockCards('waitingStocks', this.lastScanResults.waitingStocks, 'waiting');
        } else {
            // ÏÉÅÌÉú Î≥ÄÍ≤ΩÏù¥ ÏóÜÎäî Í≤ΩÏö∞ Í∞ÄÍ≤©Îßå ÏóÖÎç∞Ïù¥Ìä∏
            this.updateExistingCards();
        }
    }

    // Í∏∞Ï°¥ Ïπ¥ÎìúÎì§Ïùò Í∞ÄÍ≤©Îßå ÏóÖÎç∞Ïù¥Ìä∏
    updateExistingCards() {
        // ÎèåÌåå Ï¢ÖÎ™© Í∞ÄÍ≤© ÏóÖÎç∞Ïù¥Ìä∏
        const breakoutContainer = document.getElementById('breakoutStocks');
        if (breakoutContainer) {
            const cards = breakoutContainer.querySelectorAll('.stock-card');
            cards.forEach((card, index) => {
                if (this.lastScanResults.breakoutStocks[index]) {
                    const stock = this.lastScanResults.breakoutStocks[index];
                    const priceEl = card.querySelector('.current-price');
                    if (priceEl) {
                        priceEl.textContent = `$${stock.currentPrice.toFixed(2)}`;
                        priceEl.classList.add('updated');
                        setTimeout(() => priceEl.classList.remove('updated'), 600);
                    }
                }
            });
        }

        // ÎåÄÍ∏∞ Ï¢ÖÎ™© Í∞ÄÍ≤© ÏóÖÎç∞Ïù¥Ìä∏
        const waitingContainer = document.getElementById('waitingStocks');
        if (waitingContainer) {
            const cards = waitingContainer.querySelectorAll('.stock-card');
            cards.forEach((card, index) => {
                if (this.lastScanResults.waitingStocks[index]) {
                    const stock = this.lastScanResults.waitingStocks[index];
                    const priceEl = card.querySelector('.current-price');
                    if (priceEl) {
                        priceEl.textContent = `$${stock.currentPrice.toFixed(2)}`;
                        priceEl.classList.add('updated');
                        setTimeout(() => priceEl.classList.remove('updated'), 600);
                    }

                    // ÏßÑÏûÖÍ∞ÄÍπåÏßÄ ÎÇ®ÏùÄ Í∏àÏï° ÏóÖÎç∞Ïù¥Ìä∏
                    const gapEl = card.querySelector('.gap');
                    if (gapEl && stock.currentPrice < stock.entryPrice) {
                        const gap = stock.entryPrice - stock.currentPrice;
                        gapEl.textContent = `ÎèåÌååÍπåÏßÄ: $${gap.toFixed(2)}`;
                    }
                }
            });
        }
    }

    // ÎèåÌåå ÏïåÎ¶º ÌëúÏãú
    showBreakoutNotification(stock) {
        const settings = StorageManager.getSettings();
        
        // Î∏åÎùºÏö∞Ï†Ä ÏïåÎ¶º (ÏÑ§Ï†ïÏóêÏÑú ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞Îßå)
        if (settings.notificationEnabled && 'Notification' in window && Notification.permission === 'granted') {
            new Notification(`üöÄ ÎèåÌåå Í∞êÏßÄ: ${stock.ticker}`, {
                body: `ÌòÑÏû¨Í∞Ä: $${stock.currentPrice.toFixed(2)}\nÏßÑÏûÖÍ∞Ä: $${stock.entryPrice.toFixed(2)}`,
                icon: '/favicon.ico'
            });
        }

        // ÌôîÎ©¥ ÏïåÎ¶ºÎèÑ ÌëúÏãú
        const notification = document.createElement('div');
        notification.className = 'auto-update-notification';
        notification.innerHTML = `
            <div class="notification-content">
                <h4>üöÄ Ïã§ÏãúÍ∞Ñ ÎèåÌåå Í∞êÏßÄ!</h4>
                <p><strong>${stock.ticker}</strong>Ïù¥ ÏßÑÏûÖÍ∞ÄÎ•º ÎèåÌååÌñàÏäµÎãàÎã§!</p>
                <p>ÌòÑÏû¨Í∞Ä: $${stock.currentPrice.toFixed(2)} (ÏßÑÏûÖÍ∞Ä: $${stock.entryPrice.toFixed(2)})</p>
                <button onclick="this.parentElement.parentElement.remove()">ÌôïÏù∏</button>
            </div>
        `;
        
        // Í∞ÑÎã®Ìïú Ïä§ÌÉÄÏùºÎßÅ
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            z-index: 1000;
            max-width: 300px;
            animation: slideInRight 0.3s ease;
        `;
        
        document.body.appendChild(notification);
        
        // 10Ï¥à ÌõÑ ÏûêÎèô Ï†úÍ±∞
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 10000);
    }

    // ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Î≤ÑÌäº UI ÏóÖÎç∞Ïù¥Ìä∏
    updateAutoUpdateButtonUI() {
        const autoUpdateBtn = document.getElementById('autoUpdateToggleBtn');
        if (!autoUpdateBtn) return;

        const iconEl = autoUpdateBtn.querySelector('.btn-icon');
        const statusEl = autoUpdateBtn.querySelector('.auto-update-status');
        const timerEl = autoUpdateBtn.querySelector('.auto-update-timer');

        if (this.autoUpdateEnabled) {
            // ÌôúÏÑ±Ìôî ÏÉÅÌÉú
            autoUpdateBtn.classList.add('active');
            if (iconEl) iconEl.textContent = '‚ñ∂Ô∏è';
            if (statusEl) statusEl.textContent = 'Ïã§Ìñâ Ï§ë';
            if (timerEl) timerEl.style.display = 'block';
            autoUpdateBtn.title = 'ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ Ï§ë (1Î∂ÑÎßàÎã§) - ÌÅ¥Î¶≠ÌïòÏó¨ Ï§ëÏßÄ';
        } else {
            // ÎπÑÌôúÏÑ±Ìôî ÏÉÅÌÉú
            autoUpdateBtn.classList.remove('active');
            if (iconEl) iconEl.textContent = '‚è∏Ô∏è';
            if (statusEl) statusEl.textContent = 'Ï§ëÏßÄÎê®';
            if (timerEl) {
                timerEl.style.display = 'none';
                timerEl.textContent = '';
            }
            autoUpdateBtn.title = 'Ïã§ÏãúÍ∞Ñ Í∞ÄÍ≤© ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ (1Î∂ÑÎßàÎã§) - ÌÅ¥Î¶≠ÌïòÏó¨ ÏãúÏûë';
        }
    }

    // ÏßÑÌñâ ÌëúÏãúÍ∏∞ ÏãúÏûë
    startProgressIndicator() {
        const progressEl = document.getElementById('autoUpdateProgress');
        const timerEl = document.getElementById('autoUpdateTimer');
        
        if (!progressEl || !timerEl) return;
        
        // ÏßÑÌñâ ÌëúÏãúÍ∏∞ Ï¥àÍ∏∞Ìôî
        progressEl.style.width = '0%';
        
        let secondsElapsed = 0;
        const totalSeconds = this.updateIntervalMs / 1000; // ÏÑ§Ï†ïÎêú Í∞ÑÍ≤© ÏÇ¨Ïö©

        this.progressInterval = setInterval(() => {
            secondsElapsed++;
            const progress = (secondsElapsed / totalSeconds) * 100;
            
            progressEl.style.width = `${progress}%`;
            
            const remaining = totalSeconds - secondsElapsed;
            if (remaining > 0) {
                timerEl.textContent = `${remaining}Ï¥à ÌõÑ ÏóÖÎç∞Ïù¥Ìä∏`;
            } else {
                // ÏãúÍ∞ÑÏù¥ Îã§ ÎêòÎ©¥ ÏßÑÌñâ ÌëúÏãúÍ∏∞ Ï†ïÏßÄ (executeUpdateÏóêÏÑú Ï≤òÎ¶¨Îê®)
                this.stopProgressIndicator();
            }
        }, 1000);
    }

    // ÏßÑÌñâ ÌëúÏãúÍ∏∞ Ï§ëÏßÄ
    stopProgressIndicator() {
        if (this.progressInterval) {
            clearInterval(this.progressInterval);
            this.progressInterval = null;
        }
        
        const progressEl = document.getElementById('autoUpdateProgress');
        if (progressEl) {
            progressEl.style.width = '0%';
        }
    }

    // Îç∞Ïù¥ÌÑ∞ ÌååÏã± Î©îÏÑúÎìúÎì§
    parseWikipediaJSON(jsonText) {
        try {
            const data = JSON.parse(jsonText);
            const tickers = [];
            
            if (data.sections) {
                for (const section of data.sections) {
                    if (section.text && section.text.includes('ticker')) {
                        const regex = /\b[A-Z]{1,5}\b/g;
                        const matches = section.text.match(regex);
                        if (matches) {
                            matches.forEach(ticker => {
                                if (ticker.length <= 5 && !tickers.includes(ticker)) {
                                    tickers.push(ticker);
                                }
                            });
                        }
                    }
                }
            }
            
            console.log(`Wikipedia JSONÏóêÏÑú ${tickers.length}Í∞ú Ï¢ÖÎ™© ÌååÏã±Îê®`);
            return tickers;
        } catch (error) {
            console.warn('Wikipedia JSON ÌååÏã± Ïã§Ìå®:', error);
            return [];
        }
    }

    parseCSV(csvText) {
        try {
            const lines = csvText.split('\n');
            const tickers = [];
            
            for (let i = 1; i < lines.length; i++) {
                const line = lines[i].trim();
                if (line) {
                    const ticker = line.split(',')[0].trim().replace(/"/g, '');
                    if (ticker && ticker.length <= 5 && ticker.match(/^[A-Z.]+$/)) {
                        tickers.push(ticker);
                    }
                }
            }
            
            console.log(`CSVÏóêÏÑú ${tickers.length}Í∞ú Ï¢ÖÎ™© ÌååÏã±Îê®`);
            return tickers;
        } catch (error) {
            console.warn('CSV ÌååÏã± Ïã§Ìå®:', error);
            return [];
        }
    }

    parseAlternativeCSV(csvText) {
        try {
            const lines = csvText.split('\n');
            const tickers = [];
            
            const headers = lines[0].toLowerCase().split(',');
            const symbolIndex = headers.findIndex(h => 
                h.includes('symbol') || h.includes('ticker') || h.includes('stock')
            );
            
            if (symbolIndex >= 0) {
                for (let i = 1; i < lines.length; i++) {
                    const line = lines[i].trim();
                    if (line) {
                        const columns = line.split(',');
                        if (columns.length > symbolIndex) {
                            const ticker = columns[symbolIndex].trim().replace(/"/g, '');
                            if (ticker && ticker.length <= 5 && ticker.match(/^[A-Z.]+$/)) {
                                tickers.push(ticker);
                            }
                        }
                    }
                }
            }
            
            console.log(`Alternative CSVÏóêÏÑú ${tickers.length}Í∞ú Ï¢ÖÎ™© ÌååÏã±Îê®`);
            return tickers;
        } catch (error) {
            console.warn('Alternative CSV ÌååÏã± Ïã§Ìå®:', error);
            return [];
        }
    }
}

// Ï†ÑÏó≠ Ïä§Ï∫êÎÑà Ïù∏Ïä§ÌÑ¥Ïä§
let stockScanner;

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî (app.jsÏóêÏÑú Ìò∏Ï∂úÎê† ÏòàÏ†ï)
const initScanner = async () => {
    stockScanner = new BrowserStockScanner();
    await stockScanner.init();
    
    // Ï∫êÏãúÎêú Í≤∞Í≥º Î°úÎìúÎäî app.jsÏóêÏÑú Ï≤òÎ¶¨Îê® (Ï§ëÎ≥µ Î∞©ÏßÄ)
    
    return stockScanner;
};