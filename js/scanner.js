class BrowserStockScanner {
    constructor() {
        this.apiKey = 'VVTMQ91XVOYZSYFR'; // Alpha Vantage Î¨¥Î£å ÌÇ§
        this.corsProxy = 'https://api.allorigins.win/raw?url=';
        this.isScanning = false;
        this.sp500Tickers = [];
        this.demoMode = false; // Îç∞Î™® Î™®Îìú Í∏∞Î≥∏ ÌôúÏÑ±Ìôî
    }

    async init() {
        console.log('üöÄ Ïä§Ï∫êÎÑà Ï¥àÍ∏∞Ìôî Ï§ë...');
        await this.loadSP500Tickers();
        this.bindEvents();
    }

    async loadSP500Tickers() {
        try {
            // Ï∫êÏãúÎêú Î¶¨Ïä§Ìä∏ Î®ºÏ†Ä ÌôïÏù∏
            const cachedTickers = StorageManager.getCachedData('sp500_tickers');
            if (cachedTickers && cachedTickers.length > 0) {
                this.sp500Tickers = cachedTickers;
                console.log(`üì¶ Ï∫êÏãúÎêú ${this.sp500Tickers.length}Í∞ú S&P 500 Ï¢ÖÎ™© Î°úÎìúÎê®`);
                return;
            }

            // Î¨¥Î£å Î¨¥Ï†úÌïú Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§Îì§
            const freeSources = [
                {
                    name: 'Wikipedia JSON API',
                    url: 'https://en.wikipedia.org/api/rest_v1/page/mobile-sections/List_of_S%26P_500_companies',
                    parser: this.parseWikipediaJSON.bind(this)
                },
                {
                    name: 'GitHub S&P 500 CSV',
                    url: 'https://raw.githubusercontent.com/datasets/s-and-p-500-companies/master/data/constituents.csv',
                    parser: this.parseCSV.bind(this)
                },
                {
                    name: 'Alternative GitHub CSV',
                    url: 'https://raw.githubusercontent.com/dxjoshi/sp500_stocks/main/sp500_stocks.csv',
                    parser: this.parseAlternativeCSV.bind(this)
                }
            ];

            for (const source of freeSources) {
                try {
                    console.log(`üì° ${source.name}ÏóêÏÑú S&P 500 Î¶¨Ïä§Ìä∏ Î°úÎìú ÏãúÎèÑ...`);
                    const response = await fetch(source.url);
                    
                    if (response.ok) {
                        const data = await response.text();
                        const tickers = await source.parser(data);
                        
                        if (tickers && tickers.length > 400) { // S&P 500ÏùÄ 500Í∞ú Ï†ïÎèÑÏù¥ÎØÄÎ°ú 400Í∞ú Ïù¥ÏÉÅÏùº ÎïåÎßå ÏÑ±Í≥µÏúºÎ°ú Í∞ÑÏ£º
                            this.sp500Tickers = tickers;
                            StorageManager.cacheData('sp500_tickers', this.sp500Tickers, 7 * 24 * 60); // 7Ïùº Ï∫êÏãú
                            console.log(`üìä ${source.name}ÏóêÏÑú ${this.sp500Tickers.length}Í∞ú S&P 500 Ï¢ÖÎ™© Î°úÎìúÎê®`);
                            return;
                        } else if (tickers && tickers.length > 0) {
                            console.warn(`‚ö†Ô∏è ${source.name}ÏóêÏÑú ${tickers.length}Í∞úÎßå Î°úÎìúÎê® (Î∂ÄÎ∂Ñ ÏÑ±Í≥µ)`);
                        }
                    }
                } catch (error) {
                    console.warn(`‚ùå ${source.name} Î°úÎìú Ïã§Ìå®:`, error);
                    continue;
                }
            }

            // Î™®Îì† Î∞©Î≤ï Ïã§Ìå® Ïãú ÌôïÏû•Îêú Î∞±ÏóÖ Î¶¨Ïä§Ìä∏ ÏÇ¨Ïö© (Ï£ºÏöî S&P 500 Ï¢ÖÎ™©Îì§)
            this.sp500Tickers = [
                // Í∏∞Ïà†Ï£º (Technology)
                'AAPL', 'MSFT', 'GOOGL', 'GOOG', 'AMZN', 'NVDA', 'TSLA', 'META', 'NFLX', 'AMD', 'PYPL', 'ADBE', 'CRM', 'INTC', 'CSCO', 'AVGO', 'ORCL', 'QCOM', 'TXN', 'INTU', 'AMAT', 'MU', 'LRCX', 'KLAC', 'MRVL', 'CDNS', 'SNPS', 'WDAY', 'ABNB', 'FTNT', 'DXCM', 'TEAM', 'ADSK', 'SPLK', 'DOCU', 'ZOOM', 'ROKU', 'CRWD', 'OKTA', 'SNOW', 'DDOG', 'ZS', 'PANW', 'UBER', 'LYFT', 'PLTR', 'RBLX', 'HOOD', 'AFRM', 'UPST', 'SQ', 'SHOP',
                
                // Ìó¨Ïä§ÏºÄÏñ¥ (Healthcare)
                'JNJ', 'UNH', 'PFE', 'ABT', 'TMO', 'ABBV', 'DHR', 'BMY', 'CVS', 'MDT', 'GILD', 'REGN', 'VRTX', 'ISRG', 'CI', 'ANTM', 'HUM', 'BIIB', 'ILMN', 'MRNA', 'DXCM', 'ZTS', 'EW', 'IDXX', 'A', 'SYK', 'BSX', 'ALGN', 'RMD', 'TECH', 'CTLT', 'BDX', 'WAT', 'MTD', 'DGX', 'LH', 'PKI', 'HOLX', 'RVTY', 'MOH', 'CNC', 'CAH', 'MCK', 'ABC', 'VTRS', 'GEHC', 'SOLV', 'PODD', 'HSIC',
                
                // Í∏àÏúµ (Financial Services)
                'BRK.B', 'JPM', 'V', 'MA', 'BAC', 'WFC', 'GS', 'MS', 'C', 'AXP', 'BLK', 'SPGI', 'ICE', 'CME', 'MCO', 'COF', 'USB', 'TFC', 'PNC', 'SCHW', 'BK', 'STT', 'NTRS', 'CFG', 'HBAN', 'RF', 'FITB', 'KEY', 'ZION', 'SIVB', 'PBCT', 'CMA', 'ALLY', 'DFS', 'SYF', 'PYPL', 'FIS', 'FISV', 'ADP', 'PAYX', 'BR', 'MKTX', 'NDAQ', 'CBOE', 'TROW', 'BEN', 'IVZ', 'ETFC', 'IBKR', 'NAVI',
                
                // ÏÜåÎπÑÏû¨ (Consumer Discretionary)
                'TSLA', 'AMZN', 'HD', 'MCD', 'NKE', 'LOW', 'SBUX', 'TJX', 'BKNG', 'ORLY', 'LULU', 'EBAY', 'ETSY', 'CHTR', 'CMCSA', 'DISH', 'NFLX', 'DIS', 'PARA', 'WBD', 'FOXA', 'FOX', 'GRMN', 'APTV', 'LEA', 'BWA', 'GM', 'F', 'RIVN', 'LCID', 'NVR', 'PHM', 'DHI', 'LEN', 'TOL', 'KBH', 'MTH', 'TMHC', 'TPG', 'HLT', 'MAR', 'H', 'IHG', 'WYNN', 'LVS', 'MGM', 'CZR', 'PENN', 'DKNG',
                
                // ÏÜåÎπÑÌïÑÏàòÏû¨ (Consumer Staples)
                'WMT', 'PG', 'KO', 'PEP', 'COST', 'MDLZ', 'WBA', 'CVS', 'EXC', 'JNJ', 'CL', 'GIS', 'K', 'HSY', 'CPB', 'CAG', 'SJM', 'HRL', 'MKC', 'CHD', 'CLX', 'COTY', 'EL', 'KMB', 'SYY', 'DLTR', 'DG', 'KR', 'SWK', 'TSN', 'TAP', 'STZ', 'DEO', 'PM', 'MO', 'BTI', 'UVV', 'TPG', 'USFD', 'PFGC', 'CALM', 'JJSF', 'LANC', 'RIBT', 'SENEA', 'SENEB', 'SPTN', 'UNFI', 'USNA',
                
                // ÏóêÎÑàÏßÄ (Energy)
                'XOM', 'CVX', 'COP', 'EOG', 'SLB', 'PSX', 'VLO', 'MPC', 'OXY', 'KMI', 'WMB', 'OKE', 'TRGP', 'LNG', 'FANG', 'DVN', 'PXD', 'CTRA', 'MRO', 'APA', 'HAL', 'BKR', 'FTI', 'NOV', 'HP', 'CHK', 'EQT', 'MTDR', 'SM', 'RRC', 'CNX', 'CIVI', 'CPG', 'CRC', 'CRGY', 'CRK', 'DINO', 'DRQ', 'EGY', 'ENLC', 'EPD', 'ET', 'HESM', 'HES', 'HPK', 'KRP', 'MPLX', 'NEXT', 'NRP',
                
                // ÏÇ∞ÏóÖÏû¨ (Industrials)
                'BA', 'UNP', 'UPS', 'HON', 'RTX', 'LMT', 'CAT', 'DE', 'GE', 'MMM', 'FDX', 'NSC', 'CSX', 'NOC', 'GD', 'EMR', 'ETN', 'ITW', 'PH', 'CMI', 'CARR', 'OTIS', 'PCAR', 'JCI', 'TT', 'ROK', 'FAST', 'VRSK', 'PAYX', 'CTAS', 'EXPD', 'CHRW', 'JBHT', 'ODFL', 'XPO', 'ARCB', 'LSTR', 'MATX', 'SAIA', 'WERN', 'KNX', 'HUBG', 'FELE', 'GATX', 'GWR', 'RAIL', 'UNP', 'WAB', 'WABC',
                
                // ÏÜåÏû¨ (Materials)
                'LIN', 'APD', 'ECL', 'SHW', 'FCX', 'NEM', 'DOW', 'DD', 'PPG', 'IFF', 'MLM', 'VMC', 'NUE', 'STLD', 'PKG', 'IP', 'WRK', 'SON', 'SEE', 'BALL', 'CCL', 'AMCR', 'AVY', 'CF', 'FMC', 'LYB', 'CE', 'RPM', 'ALB', 'EMN', 'MOS', 'AA', 'X', 'CLF', 'SCCO', 'TECK', 'RIO', 'BHP', 'VALE', 'GOLD', 'NEM', 'AEM', 'KGC', 'AU', 'EGO', 'CDE', 'AG', 'HL', 'PAAS',
                
                // Î∂ÄÎèôÏÇ∞ (Real Estate)
                'AMT', 'PLD', 'CCI', 'EQIX', 'WELL', 'DLR', 'O', 'SBAC', 'PSA', 'EXR', 'AVB', 'EQR', 'VICI', 'VTR', 'ESS', 'MAA', 'KIM', 'REG', 'FRT', 'BXP', 'ARE', 'HST', 'CPT', 'UDR', 'PEAK', 'AIV', 'ELS', 'SUI', 'MSA', 'LSI', 'CUBE', 'REXR', 'AMH', 'INVH', 'COLD', 'PPS', 'LAMR', 'UNIT', 'ROIC', 'STAG', 'FR', 'KRC', 'HIW', 'DEI', 'PGRE', 'SLG', 'VNO', 'BDN', 'CUZ',
                
                // Ïú†Ìã∏Î¶¨Ìã∞ (Utilities)
                'NEE', 'DUK', 'SO', 'D', 'AEP', 'EXC', 'XEL', 'SRE', 'WEC', 'ED', 'EIX', 'ETR', 'ES', 'FE', 'AWK', 'PPL', 'CMS', 'DTE', 'NI', 'LNT', 'EVRG', 'AEE', 'CNP', 'VST', 'ATO', 'NJR', 'SWX', 'OGE', 'POR', 'AVA', 'AGR', 'BKH', 'SR', 'MDU', 'UTL', 'MGEE', 'OTTR', 'NOVA', 'YORW', 'ARTNA', 'CWEN', 'CWEN.A', 'HE', 'IDA', 'NEP', 'NWE', 'PNM', 'UGI', 'WTRG'
            ];
            
            console.log(`üìã Î∞±ÏóÖ Î¶¨Ïä§Ìä∏ ÏÇ¨Ïö©: ${this.sp500Tickers.length}Í∞ú Ï¢ÖÎ™©`);
            
        } catch (error) {
            console.error('S&P 500 Î¶¨Ïä§Ìä∏ Î°úÎìú Ïã§Ìå®:', error);
            // ÏµúÏÜå Î∞±ÏóÖ Î¶¨Ïä§Ìä∏
            this.sp500Tickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'NVDA'];
            console.log(`‚ö†Ô∏è ÏµúÏÜå Î∞±ÏóÖ Î¶¨Ïä§Ìä∏ ÏÇ¨Ïö©: ${this.sp500Tickers.length}Í∞ú Ï¢ÖÎ™©`);
        }
    }

    async scanStocks() {
        if (this.isScanning) return;
        
        this.isScanning = true;
        this.updateStatus('Ïä§Ï∫î Ï§ë...', 'scanning');
        
        const results = {
            breakoutStocks: [],
            waitingStocks: [],
            totalScanned: 0,
            errors: 0
        };

        // ÏÑ§Ï†ïÍ∞í Í∞ÄÏ†∏Ïò§Í∏∞
        const settings = StorageManager.getSettings();
        
        try {
            const totalTickers = Math.min(this.sp500Tickers.length, 50); // ÌÖåÏä§Ìä∏Ïö©ÏúºÎ°ú 50Í∞úÎ°ú Ï†úÌïú
            
            for (let i = 0; i < totalTickers; i++) {
                const ticker = this.sp500Tickers[i];
                const progress = Math.round(((i + 1) / totalTickers) * 100);
                
                this.updateStatus(`Ïä§Ï∫î Ï§ë... ${ticker} (${i + 1}/${totalTickers}) ${progress}%`, 'scanning');
                
                try {
                    const stock = await this.analyzeStock(ticker, settings);
                    results.totalScanned++;
                    
                    if (stock) {
                        if (stock.isBreakout) {
                            results.breakoutStocks.push(stock);
                            console.log(`üöÄ ÎèåÌåå Î∞úÍ≤¨: ${ticker} $${stock.currentPrice.toFixed(2)} (ÏßÑÏûÖÍ∞Ä: $${stock.entryPrice.toFixed(2)})`);
                        } else {
                            results.waitingStocks.push(stock);
                            console.log(`‚è∞ ÎåÄÍ∏∞ Ï§ë: ${ticker} $${stock.currentPrice.toFixed(2)} (ÏßÑÏûÖÍπåÏßÄ: $${stock.gapToEntry.toFixed(2)})`);
                        }
                    } else {
                        results.errors++;
                    }
                } catch (error) {
                    results.errors++;
                    console.error(`‚ùå ${ticker} Î∂ÑÏÑù Ïã§Ìå®:`, error.message);
                }
                
                // Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ (5Í∞úÎßàÎã§)
                if ((i + 1) % 5 === 0 || (stock && stock.isBreakout)) {
                    this.updateDashboard(results);
                }
                
                // ÎîúÎ†àÏù¥ (API Ï†úÌïú Î∞©ÏßÄ)
                await this.delay(this.demoMode ? 50 : 200);
            }
            
            // Í≤∞Í≥º Ï†ïÎ†¨
            results.waitingStocks.sort((a, b) => a.gapToEntry - b.gapToEntry);
            results.breakoutStocks.sort((a, b) => b.score - a.score);
            
            // ÏÉÅÏúÑ Í≤∞Í≥ºÎßå Ïú†ÏßÄ
            results.waitingStocks = results.waitingStocks.slice(0, 15);
            results.breakoutStocks = results.breakoutStocks.slice(0, 10);
            
            // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•
            StorageManager.saveResults(results);
            
            // UI ÏóÖÎç∞Ïù¥Ìä∏
            this.displayResults(results);
            
            // ÎèåÌåå ÏïåÎ¶º
            if (results.breakoutStocks.length > 0) {
                NotificationManager.sendBreakoutAlert(results.breakoutStocks);
            }
            
            this.updateStatus(`ÏôÑÎ£å: ${results.totalScanned}Í∞ú Ïä§Ï∫î (ÎèåÌåå: ${results.breakoutStocks.length}, ÎåÄÍ∏∞: ${results.waitingStocks.length})`, 'completed');
            
        } catch (error) {
            console.error('Ïä§Ï∫î Ï§ë Ïò§Î•ò:', error);
            this.updateStatus('Ïä§Ï∫î Ïã§Ìå®', 'error');
        } finally {
            this.isScanning = false;
        }
    }

    async analyzeStock(ticker, settings) {
        try {
            let stockData;
            
            if (this.demoMode) {
                // Îç∞Î™® Î™®Îìú: Î™®Ïùò Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
                stockData = this.generateDemoData(ticker);
            } else {
                // Ïã§Ï†ú API Î™®Îìú
                const apiData = await this.fetchStockData(ticker);
                if (!apiData || !apiData.timeSeries) {
                    return null;
                }
                
                const dates = Object.keys(apiData.timeSeries).sort().reverse();
                if (dates.length < 2) return null;
                
                const today = apiData.timeSeries[dates[0]];
                const yesterday = apiData.timeSeries[dates[1]];
                
                stockData = {
                    currentPrice: parseFloat(today['4. close']),
                    yesterdayClose: parseFloat(yesterday['4. close']),
                    yesterdayHigh: parseFloat(yesterday['2. high']),
                    yesterdayLow: parseFloat(yesterday['3. low']),
                    volume: parseInt(yesterday['5. volume'])
                };
            }
            
            // Î≥ÄÎèôÏÑ± ÎèåÌåå Í≥ÑÏÇ∞
            const calculation = VolatilityCalculator.calculate(stockData, settings);
            
            if (!calculation.meetsConditions) {
                return null;
            }
            
            return {
                ticker,
                ...calculation,
                timestamp: new Date().toISOString()
            };
            
        } catch (error) {
            console.error(`${ticker} Î∂ÑÏÑù Ï§ë Ïò§Î•ò:`, error);
            return null;
        }
    }

    generateDemoData(ticker) {
        // ÏãúÎìúÍ∞íÏùÑ ÏúÑÌïú Í∞ÑÎã®Ìïú Ìï¥Ïãú Ìï®Ïàò
        const hash = ticker.split('').reduce((a, b) => {
            a = ((a << 5) - a) + b.charCodeAt(0);
            return a & a;
        }, 0);
        
        const random = (seed) => {
            const x = Math.sin(seed) * 10000;
            return x - Math.floor(x);
        };
        
        const basePrice = 30 + (random(hash) * 200); // $30-$230
        const volatility = 0.015 + (random(hash + 1) * 0.065); // 1.5-8%
        const volume = 800000 + (random(hash + 2) * 4000000); // 80Îßå-480ÎßåÏ£º
        
        const yesterdayClose = basePrice;
        const dailyRange = yesterdayClose * volatility;
        const yesterdayLow = yesterdayClose - (dailyRange * 0.4);
        const yesterdayHigh = yesterdayLow + dailyRange;
        
        // ÌòÑÏû¨Í∞ÄÎäî ÎûúÎç§ÌïòÍ≤å ÏÑ§Ï†ï (ÏùºÎ∂ÄÎäî ÎèåÌåå, ÏùºÎ∂ÄÎäî ÎåÄÍ∏∞)
        const breakoutChance = random(hash + 3);
        const entryPrice = yesterdayClose + (dailyRange * 0.6);
        
        let currentPrice;
        if (breakoutChance < 0.15) {
            // 15% ÌôïÎ•†Î°ú ÎèåÌåå
            currentPrice = entryPrice + (random(hash + 4) * dailyRange * 0.4);
        } else {
            // 85% ÌôïÎ•†Î°ú ÎåÄÍ∏∞
            currentPrice = yesterdayClose + (random(hash + 5) * dailyRange * 0.5);
        }
        
        return {
            currentPrice,
            yesterdayClose,
            yesterdayHigh,
            yesterdayLow,
            volume: Math.floor(volume)
        };
    }

    async fetchStockData(ticker) {
        // Ïã§Ï†ú Alpha Vantage API ÌÇ§Í∞Ä ÏûàÏùÑ ÎïåÎßå API Ìò∏Ï∂ú
        if (this.apiKey && this.apiKey !== 'demo' && this.apiKey !== 'VVTMQ91XVOYZSYFR') {
            try {
                console.log(`üì° ${ticker} Alpha Vantage API Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Îäî Ï§ë...`);
                const url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${ticker}&apikey=${this.apiKey}`;
                const response = await fetch(url);
                
                if (response.ok) {
                    const data = await response.json();
                    
                    if (data['Error Message'] || data['Note']) {
                        throw new Error('API Ï†úÌïú ÎòêÎäî Ïò§Î•ò');
                    }
                    
                    return {
                        timeSeries: data['Time Series (Daily)']
                    };
                } else {
                    throw new Error(`HTTP ${response.status}`);
                }
            } catch (apiError) {
                console.warn(`‚ùå ${ticker} Alpha Vantage API Ïã§Ìå®:`, apiError);
            }
        }
        
        return null;
    }

    displayResults(results) {
        // ÎåÄÏãúÎ≥¥Îìú ÏóÖÎç∞Ïù¥Ìä∏
        this.updateDashboard(results);
        
        // ÎèåÌåå Ï¢ÖÎ™© ÌëúÏãú
        this.renderStockCards('breakoutStocks', results.breakoutStocks, 'breakout');
        
        // ÎåÄÍ∏∞ Ï¢ÖÎ™© ÌëúÏãú
        this.renderStockCards('waitingStocks', results.waitingStocks, 'waiting');
    }

    updateDashboard(results) {
        // ÎåÄÏãúÎ≥¥Îìú Ïà´Ïûê ÏóÖÎç∞Ïù¥Ìä∏
        document.getElementById('breakoutCount').textContent = results.breakoutStocks.length;
        document.getElementById('waitingCount').textContent = results.waitingStocks.length;
        document.getElementById('totalScanned').textContent = results.totalScanned;
        document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString('ko-KR');
        
        // ÏßÑÌñâ Ï§ëÏùº Îïå Ïã§ÏãúÍ∞Ñ Í≤∞Í≥º ÌëúÏãú
        if (results.breakoutStocks.length > 0) {
            this.renderStockCards('breakoutStocks', results.breakoutStocks.slice(0, 10), 'breakout');
        }
        
        if (results.waitingStocks.length > 0) {
            this.renderStockCards('waitingStocks', results.waitingStocks.slice(0, 15), 'waiting');
        }
    }

    renderStockCards(containerId, stocks, type) {
        const container = document.getElementById(containerId);
        container.innerHTML = '';
        
        if (stocks.length === 0) {
            container.innerHTML = '<div class="no-results">Ï°∞Í±¥Ïóê ÎßûÎäî Ï¢ÖÎ™©Ïù¥ ÏóÜÏäµÎãàÎã§.</div>';
            return;
        }
        
        stocks.forEach(stock => {
            const card = document.createElement('div');
            card.className = `stock-card ${type}`;
            card.onclick = () => this.openStockChart(stock.ticker);
            
            const gapDisplay = type === 'waiting' 
                ? `<div class="gap">ÎèåÌååÍπåÏßÄ: $${stock.gapToEntry.toFixed(2)}</div>`
                : '<div class="breakout-badge">ÎèåÌåå!</div>';
            
            const riskReward = stock.riskRewardRatio ? ` (R:R ${stock.riskRewardRatio.toFixed(1)}:1)` : '';
            
            card.innerHTML = `
                <div class="stock-header">
                    <h3>${stock.ticker}</h3>
                    ${gapDisplay}
                </div>
                <div class="price-info">
                    <div class="current-price">$${stock.currentPrice.toFixed(2)}</div>
                    <div class="entry-price">ÏßÑÏûÖ: $${stock.entryPrice.toFixed(2)}${riskReward}</div>
                </div>
                <div class="targets">
                    <div class="target stop-loss">ÏÜêÏ†à: $${stock.stopLoss.toFixed(2)}</div>
                    <div class="target profit">Î™©Ìëú1: $${stock.target1.toFixed(2)}</div>
                    <div class="target profit">Î™©Ìëú2: $${stock.target2.toFixed(2)}</div>
                </div>
                <div class="stats">
                    <span>Î≥ÄÎèôÎ•†: ${stock.volatility.toFixed(1)}%</span>
                    <span>Í±∞ÎûòÎüâ: ${this.formatNumber(stock.volume)}</span>
                    <span>Ï†êÏàò: ${stock.score || 0}/100</span>
                </div>
            `;
            
            container.appendChild(card);
        });
    }

    openStockChart(ticker) {
        // TradingView ÎòêÎäî Yahoo FinanceÎ°ú ÏÉà ÌÉ≠ÏóêÏÑú Ïó¥Í∏∞
        const url = `https://finance.yahoo.com/quote/${ticker}`;
        window.open(url, '_blank');
    }

    formatNumber(num) {
        if (num >= 1000000) {
            return (num / 1000000).toFixed(1) + 'M';
        } else if (num >= 1000) {
            return (num / 1000).toFixed(1) + 'K';
        }
        return num.toString();
    }

    updateStatus(message, type = 'default') {
        const statusEl = document.getElementById('status');
        const scanBtn = document.getElementById('scanBtn');
        
        statusEl.textContent = message;
        statusEl.className = `status status-${type}`;
        
        // Ïä§Ï∫î Î≤ÑÌäº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        if (type === 'scanning') {
            scanBtn.disabled = true;
            scanBtn.textContent = 'üîÑ Ïä§Ï∫î Ï§ë...';
        } else {
            scanBtn.disabled = false;
            scanBtn.textContent = 'üîç Ïä§Ï∫î ÏãúÏûë';
        }
    }

    bindEvents() {
        document.getElementById('scanBtn').addEventListener('click', () => {
            this.scanStocks();
        });
        
        // ÏûêÎèô Ïä§Ï∫î ÏÑ§Ï†ï
        document.getElementById('autoScan').addEventListener('change', (e) => {
            if (e.target.checked) {
                this.startAutoScan();
            } else {
                this.stopAutoScan();
            }
        });
        
        // ÏÑ§Ï†ï Î≥ÄÍ≤Ω Í∞êÏßÄ
        document.getElementById('volatilityRange').addEventListener('input', (e) => {
            const value = e.target.value;
            document.getElementById('volatilityValue').textContent = `2-${value}%`;
            StorageManager.updateSettings({ volatilityMax: value / 100 });
        });
        
        document.getElementById('minVolume').addEventListener('change', (e) => {
            StorageManager.updateSettings({ minVolume: parseInt(e.target.value) });
        });
    }

    startAutoScan() {
        this.autoScanInterval = setInterval(() => {
            if (!this.isScanning) {
                this.scanStocks();
            }
        }, 5 * 60 * 1000); // 5Î∂ÑÎßàÎã§
        console.log('‚úÖ ÏûêÎèô Ïä§Ï∫î ÏãúÏûëÎê® (5Î∂Ñ Í∞ÑÍ≤©)');
    }

    stopAutoScan() {
        if (this.autoScanInterval) {
            clearInterval(this.autoScanInterval);
            this.autoScanInterval = null;
            console.log('‚èπÔ∏è ÏûêÎèô Ïä§Ï∫î Ï§ëÏßÄÎê®');
        }
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Îç∞Ïù¥ÌÑ∞ ÌååÏã± Î©îÏÑúÎìúÎì§
    parseWikipediaJSON(jsonText) {
        try {
            const data = JSON.parse(jsonText);
            const tickers = [];
            
            if (data.sections) {
                for (const section of data.sections) {
                    if (section.text && section.text.includes('ticker')) {
                        const regex = /\b[A-Z]{1,5}\b/g;
                        const matches = section.text.match(regex);
                        if (matches) {
                            matches.forEach(ticker => {
                                if (ticker.length <= 5 && !tickers.includes(ticker)) {
                                    tickers.push(ticker);
                                }
                            });
                        }
                    }
                }
            }
            
            console.log(`Wikipedia JSONÏóêÏÑú ${tickers.length}Í∞ú Ï¢ÖÎ™© ÌååÏã±Îê®`);
            return tickers;
        } catch (error) {
            console.warn('Wikipedia JSON ÌååÏã± Ïã§Ìå®:', error);
            return [];
        }
    }

    parseCSV(csvText) {
        try {
            const lines = csvText.split('\n');
            const tickers = [];
            
            for (let i = 1; i < lines.length; i++) {
                const line = lines[i].trim();
                if (line) {
                    const ticker = line.split(',')[0].trim().replace(/"/g, '');
                    if (ticker && ticker.length <= 5 && ticker.match(/^[A-Z.]+$/)) {
                        tickers.push(ticker);
                    }
                }
            }
            
            console.log(`CSVÏóêÏÑú ${tickers.length}Í∞ú Ï¢ÖÎ™© ÌååÏã±Îê®`);
            return tickers;
        } catch (error) {
            console.warn('CSV ÌååÏã± Ïã§Ìå®:', error);
            return [];
        }
    }

    parseAlternativeCSV(csvText) {
        try {
            const lines = csvText.split('\n');
            const tickers = [];
            
            const headers = lines[0].toLowerCase().split(',');
            const symbolIndex = headers.findIndex(h => 
                h.includes('symbol') || h.includes('ticker') || h.includes('stock')
            );
            
            if (symbolIndex >= 0) {
                for (let i = 1; i < lines.length; i++) {
                    const line = lines[i].trim();
                    if (line) {
                        const columns = line.split(',');
                        if (columns.length > symbolIndex) {
                            const ticker = columns[symbolIndex].trim().replace(/"/g, '');
                            if (ticker && ticker.length <= 5 && ticker.match(/^[A-Z.]+$/)) {
                                tickers.push(ticker);
                            }
                        }
                    }
                }
            }
            
            console.log(`Alternative CSVÏóêÏÑú ${tickers.length}Í∞ú Ï¢ÖÎ™© ÌååÏã±Îê®`);
            return tickers;
        } catch (error) {
            console.warn('Alternative CSV ÌååÏã± Ïã§Ìå®:', error);
            return [];
        }
    }
}

// Ï†ÑÏó≠ Ïä§Ï∫êÎÑà Ïù∏Ïä§ÌÑ¥Ïä§
let stockScanner;

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî (app.jsÏóêÏÑú Ìò∏Ï∂úÎê† ÏòàÏ†ï)
const initScanner = async () => {
    stockScanner = new BrowserStockScanner();
    await stockScanner.init();
    
    // Ï∫êÏãúÎêú Í≤∞Í≥º Î°úÎìú
    const cachedResults = StorageManager.getResults();
    if (cachedResults) {
        stockScanner.displayResults(cachedResults);
    }
    
    return stockScanner;
};